/* The following code was generated by JFlex 1.4.3 on 29.01.15 19:50 */

package org.mustbe.consulo.csharp.lang.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokensImpl;
import org.mustbe.consulo.csharp.lang.psi.CSharpTemplateTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29.01.15 19:50 from the specification file
 * <tt>F:/consulo-csharp/csharp-psi-impl/src/org/mustbe/consulo/csharp/lang/lexer/_CSharpLexer.flex</tt>
 */
class _CSharpLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\2\1\4\1\0\1\2\1\32\16\13\4\0\1\2\1\106"+
    "\1\10\1\33\1\12\1\74\1\76\1\6\1\71\1\72\1\5\1\75"+
    "\1\107\1\30\1\26\1\3\1\20\11\1\1\103\1\104\1\101\1\73"+
    "\1\102\1\110\1\11\1\15\1\22\1\15\1\24\1\27\1\23\5\12"+
    "\1\16\1\25\2\12\1\31\4\12\1\17\2\12\1\21\2\12\1\67"+
    "\1\7\1\70\1\77\1\14\1\0\1\34\1\54\1\56\1\53\1\45"+
    "\1\46\1\36\1\57\1\40\1\60\1\44\1\37\1\43\1\50\1\52"+
    "\1\62\1\12\1\35\1\41\1\42\1\47\1\51\1\63\1\61\1\55"+
    "\1\64\1\65\1\100\1\66\1\105\41\13\2\0\4\12\4\0\1\12"+
    "\2\0\1\13\7\0\1\12\4\0\1\12\5\0\27\12\1\0\37\12"+
    "\1\0\u013f\12\31\0\162\12\4\0\14\12\16\0\5\12\11\0\1\12"+
    "\21\0\130\13\5\0\23\13\12\0\1\12\13\0\1\12\1\0\3\12"+
    "\1\0\1\12\1\0\24\12\1\0\54\12\1\0\46\12\1\0\5\12"+
    "\4\0\202\12\1\0\4\13\3\0\105\12\1\0\46\12\2\0\2\12"+
    "\6\0\20\12\41\0\46\12\2\0\1\12\7\0\47\12\11\0\21\13"+
    "\1\0\27\13\1\0\3\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\13\0\33\12\5\0\3\12\15\0\4\13\14\0\6\13\13\0\32\12"+
    "\5\0\13\12\16\13\7\0\12\13\4\0\2\12\1\13\143\12\1\0"+
    "\1\12\10\13\1\0\6\13\2\12\2\13\1\0\4\13\2\12\12\13"+
    "\3\12\2\0\1\12\17\0\1\13\1\12\1\13\36\12\33\13\2\0"+
    "\3\12\60\0\46\12\13\13\1\12\u014f\0\3\13\66\12\2\0\1\13"+
    "\1\12\20\13\2\0\1\12\4\13\3\0\12\12\2\13\2\0\12\13"+
    "\21\0\3\13\1\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\1\12\3\0\4\12\2\0\1\13\1\12\7\13\2\0\2\13"+
    "\2\0\3\13\11\0\1\13\4\0\2\12\1\0\3\12\2\13\2\0"+
    "\12\13\4\12\15\0\3\13\1\0\6\12\4\0\2\12\2\0\26\12"+
    "\1\0\7\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\13"+
    "\1\0\5\13\4\0\2\13\2\0\3\13\13\0\4\12\1\0\1\12"+
    "\7\0\14\13\3\12\14\0\3\13\1\0\11\12\1\0\3\12\1\0"+
    "\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\13\1\12"+
    "\10\13\1\0\3\13\1\0\3\13\2\0\1\12\17\0\2\12\2\13"+
    "\2\0\12\13\1\0\1\12\17\0\3\13\1\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12\2\0\1\13"+
    "\1\12\6\13\3\0\2\13\2\0\3\13\10\0\2\13\4\0\2\12"+
    "\1\0\3\12\4\0\12\13\1\0\1\12\20\0\1\13\1\12\1\0"+
    "\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\3\0\3\12\3\0\10\12\1\0\3\12\4\0"+
    "\5\13\3\0\3\13\1\0\4\13\11\0\1\13\17\0\11\13\11\0"+
    "\1\12\7\0\3\13\1\0\10\12\1\0\3\12\1\0\27\12\1\0"+
    "\12\12\1\0\5\12\4\0\7\13\1\0\3\13\1\0\4\13\7\0"+
    "\2\13\11\0\2\12\4\0\12\13\22\0\2\13\1\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\2\0\1\13\1\12"+
    "\7\13\1\0\3\13\1\0\4\13\7\0\2\13\7\0\1\12\1\0"+
    "\2\12\4\0\12\13\22\0\2\13\1\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\20\12\4\0\6\13\2\0\3\13\1\0\4\13\11\0"+
    "\1\13\10\0\2\12\4\0\12\13\22\0\2\13\1\0\22\12\3\0"+
    "\30\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\13\4\0"+
    "\6\13\1\0\1\13\1\0\10\13\22\0\2\13\15\0\60\12\1\13"+
    "\2\12\7\13\4\0\10\12\10\13\1\0\12\13\47\0\2\12\1\0"+
    "\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0"+
    "\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0"+
    "\4\12\1\13\2\12\6\13\1\0\2\13\1\12\2\0\5\12\1\0"+
    "\1\12\1\0\6\13\2\0\12\13\2\0\2\12\42\0\1\12\27\0"+
    "\2\13\6\0\12\13\13\0\1\13\1\0\1\13\1\0\1\13\4\0"+
    "\2\13\10\12\1\0\42\12\6\0\24\13\1\0\2\13\4\12\4\0"+
    "\10\13\1\0\44\13\11\0\1\13\71\0\42\12\1\0\5\12\1\0"+
    "\2\12\1\0\7\13\3\0\4\13\6\0\12\13\6\0\6\12\4\13"+
    "\106\0\46\12\12\0\51\12\7\0\132\12\5\0\104\12\5\0\122\12"+
    "\6\0\7\12\1\0\77\12\1\0\1\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\47\12\1\0\1\12\1\0\4\12"+
    "\2\0\37\12\1\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\7\12\1\0\7\12\1\0\27\12\1\0\37\12"+
    "\1\0\1\12\1\0\4\12\2\0\7\12\1\0\47\12\1\0\23\12"+
    "\16\0\11\13\56\0\125\12\14\0\u026c\12\2\0\10\12\12\0\32\12"+
    "\5\0\113\12\3\0\3\12\17\0\15\12\1\0\4\12\3\13\13\0"+
    "\22\12\3\13\13\0\22\12\2\13\14\0\15\12\1\0\3\12\1\0"+
    "\2\13\14\0\64\12\40\13\3\0\1\12\3\0\2\12\1\13\2\0"+
    "\12\13\41\0\3\13\2\0\12\13\6\0\130\12\10\0\51\12\1\13"+
    "\126\0\35\12\3\0\14\13\4\0\14\13\12\0\12\13\36\12\2\0"+
    "\5\12\u038b\0\154\12\224\0\234\12\4\0\132\12\6\0\26\12\2\0"+
    "\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12\1\0"+
    "\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0"+
    "\15\12\5\0\3\12\1\0\7\12\17\0\4\13\32\0\5\13\20\0"+
    "\2\12\23\0\1\12\13\0\4\13\6\0\6\13\1\0\1\12\15\0"+
    "\1\12\40\0\22\12\36\0\15\13\4\0\1\13\3\0\6\13\27\0"+
    "\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\3\12\1\0"+
    "\7\12\3\0\3\12\5\0\5\12\26\0\44\12\u0e81\0\3\12\31\0"+
    "\11\12\6\13\1\0\5\12\2\0\5\12\4\0\126\12\2\0\2\13"+
    "\2\0\3\12\1\0\137\12\5\0\50\12\4\0\136\12\21\0\30\12"+
    "\70\0\20\12\u0200\0\u19b6\12\112\0\u51a6\12\132\0\u048d\12\u0773\0\u2ba4\12"+
    "\u215c\0\u012e\12\2\0\73\12\225\0\7\12\14\0\5\12\5\0\1\12"+
    "\1\13\12\12\1\0\15\12\1\0\5\12\1\0\1\12\1\0\2\12"+
    "\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0\66\12"+
    "\50\0\15\12\3\0\20\13\20\0\4\13\17\0\2\12\30\0\3\12"+
    "\31\0\1\12\6\0\5\12\1\0\207\12\2\0\1\13\4\0\1\12"+
    "\13\0\12\13\7\0\32\12\4\0\1\12\1\0\32\12\12\0\132\12"+
    "\3\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\2\12"+
    "\3\0\2\12\22\0\3\13\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\2\10\1\2\1\11\1\12\1\3\1\13\22\10"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\2\41\1\42\1\43"+
    "\1\44\1\45\1\46\2\45\1\3\1\47\1\50\1\51"+
    "\1\52\2\6\2\7\1\0\1\10\2\2\1\53\1\54"+
    "\1\55\1\56\4\10\1\57\1\10\1\60\1\61\37\10"+
    "\1\62\15\10\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\0\1\76\1\0"+
    "\1\77\1\100\1\101\1\102\1\45\1\47\1\103\1\0"+
    "\1\104\2\10\1\2\1\0\3\10\1\105\4\10\1\106"+
    "\10\10\1\107\14\10\1\110\7\10\1\111\4\10\1\112"+
    "\27\10\1\113\1\114\1\50\2\10\1\0\3\10\1\115"+
    "\1\116\1\117\13\10\1\120\2\10\1\121\1\122\1\123"+
    "\10\10\1\124\5\10\1\125\2\10\1\126\10\10\1\127"+
    "\1\10\1\130\1\131\1\132\4\10\1\133\23\10\1\134"+
    "\1\135\2\10\1\136\1\137\2\10\1\140\1\10\1\141"+
    "\1\10\1\142\1\143\16\10\1\144\1\145\1\146\1\147"+
    "\6\10\1\150\4\10\1\151\3\10\1\152\1\153\1\10"+
    "\1\154\1\155\1\156\1\157\1\160\1\161\3\10\1\162"+
    "\1\163\5\10\1\164\4\10\1\165\3\10\1\166\2\10"+
    "\1\167\11\10\1\170\1\171\2\10\1\172\4\10\1\173"+
    "\1\174\1\175\1\10\1\176\1\177\3\10\1\200\1\201"+
    "\1\202\1\10\1\203\1\10\1\204\2\10\1\205\1\206"+
    "\1\207\1\210\1\211\1\10\1\212\1\213\1\214\1\10"+
    "\1\215\1\216\1\217\1\220";

  private static int [] zzUnpackAction() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\222\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68"+
    "\0\u0bb1\0\u0bfa\0\222\0\222\0\u0c43\0\222\0\u0c8c\0\222"+
    "\0\u0cd5\0\222\0\u0d1e\0\u0d67\0\u0db0\0\222\0\222\0\222"+
    "\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\222\0\222\0\222"+
    "\0\u0f66\0\u0faf\0\222\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\222"+
    "\0\222\0\222\0\u02da\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u02da"+
    "\0\u1240\0\u02da\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6"+
    "\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace"+
    "\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\u1fa7\0\222\0\u1ff0\0\222\0\222"+
    "\0\222\0\222\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6"+
    "\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u02da\0\u23a5"+
    "\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed"+
    "\0\u2636\0\u267f\0\u26c8\0\u2711\0\u02da\0\u275a\0\u27a3\0\u27ec"+
    "\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34"+
    "\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c"+
    "\0\u2cc5\0\u02da\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u02da\0\u2e32"+
    "\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a"+
    "\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2"+
    "\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\222\0\222"+
    "\0\222\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u02da"+
    "\0\u02da\0\u02da\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4"+
    "\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951\0\u02da\0\u399a\0\u39e3"+
    "\0\u02da\0\u02da\0\u02da\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u3b50"+
    "\0\u3b99\0\u3be2\0\u3c2b\0\u02da\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f"+
    "\0\u3d98\0\u02da\0\u3de1\0\u3e2a\0\u02da\0\u3e73\0\u3ebc\0\u3f05"+
    "\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u02da\0\u40bb\0\u02da"+
    "\0\u02da\0\u02da\0\u4104\0\u414d\0\u4196\0\u41df\0\u02da\0\u4228"+
    "\0\u4271\0\u42ba\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470"+
    "\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\u466f\0\u46b8"+
    "\0\u4701\0\u474a\0\u02da\0\u02da\0\u4793\0\u47dc\0\u02da\0\u02da"+
    "\0\u4825\0\u486e\0\u02da\0\u48b7\0\u02da\0\u4900\0\u02da\0\u02da"+
    "\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48"+
    "\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\u4cb5\0\u4cfe\0\u02da\0\u02da"+
    "\0\u02da\0\u02da\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4"+
    "\0\u02da\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u02da\0\u5021\0\u506a"+
    "\0\u50b3\0\u02da\0\u02da\0\u50fc\0\u02da\0\u02da\0\u02da\0\u02da"+
    "\0\u02da\0\u02da\0\u5145\0\u518e\0\u51d7\0\u02da\0\u02da\0\u5220"+
    "\0\u5269\0\u52b2\0\u52fb\0\u5344\0\u02da\0\u538d\0\u53d6\0\u541f"+
    "\0\u5468\0\u02da\0\u54b1\0\u54fa\0\u5543\0\u02da\0\u558c\0\u55d5"+
    "\0\u02da\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b\0\u57d4"+
    "\0\u581d\0\u5866\0\u02da\0\u02da\0\u58af\0\u58f8\0\u02da\0\u5941"+
    "\0\u598a\0\u59d3\0\u5a1c\0\u02da\0\u02da\0\u02da\0\u5a65\0\u02da"+
    "\0\u02da\0\u5aae\0\u5af7\0\u5b40\0\u02da\0\u02da\0\u02da\0\u5b89"+
    "\0\u02da\0\u5bd2\0\u02da\0\u5c1b\0\u5c64\0\u02da\0\u02da\0\u02da"+
    "\0\u02da\0\u02da\0\u5cad\0\u02da\0\u02da\0\u02da\0\u5cf6\0\u02da"+
    "\0\u02da\0\u02da\0\u02da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\3\1\14\3\13\1\15\5\13"+
    "\1\16\1\13\1\17\1\13\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\13\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\13\1\41"+
    "\3\13\1\42\1\43\1\13\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\2\70\1\71\1\70\1\72\25\70\1\73\56\70\112\0"+
    "\1\4\12\0\1\4\1\0\1\74\1\75\1\4\2\0"+
    "\1\76\1\77\1\100\1\101\1\102\7\0\1\74\3\0"+
    "\1\100\1\0\1\102\1\76\1\75\3\0\1\77\37\0"+
    "\1\5\1\0\1\103\25\0\1\103\1\21\60\0\1\104"+
    "\1\0\1\105\65\0\1\106\110\0\1\107\15\0\4\10"+
    "\1\0\1\10\1\110\1\111\22\10\1\0\56\10\4\11"+
    "\1\0\2\11\1\112\1\113\21\11\1\0\56\11\10\0"+
    "\1\114\1\0\1\13\1\0\4\13\1\0\5\13\1\0"+
    "\1\13\1\0\1\13\2\0\31\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\31\13\25\0"+
    "\1\13\10\0\2\13\1\115\11\13\1\0\1\13\1\0"+
    "\1\13\2\0\31\13\25\0\1\4\12\0\1\4\1\0"+
    "\1\74\1\75\1\4\1\116\1\117\1\76\1\77\1\100"+
    "\1\101\1\102\7\0\1\74\3\0\1\100\1\0\1\102"+
    "\1\76\1\75\3\0\1\77\1\117\4\0\1\116\30\0"+
    "\1\101\16\0\1\101\120\0\1\120\42\0\1\121\6\0"+
    "\1\122\10\0\1\5\1\0\1\5\25\0\1\103\1\21"+
    "\56\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\5\13\1\123\12\13\1\124\10\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\125\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\16\13\1\126\12\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\16\13"+
    "\1\127\12\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\5\13\1\130\1\13\1\131\2\13"+
    "\1\132\1\13\1\133\14\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\4\13\1\134\1\13"+
    "\1\135\2\13\1\136\6\13\1\137\2\13\1\140\3\13"+
    "\1\141\1\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\13\1\142\17\13\1\143\1\13"+
    "\1\144\5\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\145\10\13\1\146\1\147"+
    "\7\13\1\150\3\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\151\2\13\1\152\1\153"+
    "\11\13\1\154\12\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\3\13\1\155\1\156\1\157"+
    "\6\13\1\160\14\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\161\10\13\1\162\1\13"+
    "\1\163\15\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\4\13\1\164\11\13\1\165\12\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\13\13\1\166\1\13\1\167\2\13\1\170\5\13"+
    "\1\171\2\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\172\4\13\1\173\2\13"+
    "\1\174\7\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\175\1\176\14\13\1\177\2\13"+
    "\1\200\7\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\201\2\13\1\202\12\13\1\203"+
    "\4\13\1\204\5\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\205\1\206\11\13\1\207"+
    "\15\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\23\13\1\210\5\13\117\0\1\211\6\0"+
    "\1\212\101\0\1\213\110\0\1\214\1\0\1\215\106\0"+
    "\1\216\2\0\1\217\105\0\1\220\110\0\1\221\4\0"+
    "\1\222\103\0\1\223\5\0\1\224\102\0\1\225\6\0"+
    "\1\226\111\0\1\227\100\0\1\230\43\0\1\231\64\0"+
    "\1\71\112\0\1\72\123\0\1\232\27\0\1\232\57\0"+
    "\1\232\20\0\1\232\52\0\1\101\12\0\1\101\3\0"+
    "\1\101\2\0\1\76\1\77\1\100\1\0\1\102\13\0"+
    "\1\100\1\0\1\102\1\76\4\0\1\77\36\0\1\233"+
    "\12\0\1\233\3\0\1\233\2\0\1\76\1\77\1\100"+
    "\2\0\1\233\12\0\1\100\2\0\1\76\4\0\1\77"+
    "\21\0\1\233\15\0\1\103\1\0\1\103\25\0\1\103"+
    "\56\0\3\234\1\235\1\0\25\234\1\0\56\234\5\105"+
    "\1\236\103\105\4\10\1\0\25\10\1\0\56\10\4\11"+
    "\1\0\25\11\1\0\56\11\10\114\1\237\100\114\1\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\240\6\13\1\241\21\13\25\0\1\242\12\0\2\242"+
    "\1\74\1\75\1\242\1\0\3\242\1\0\1\243\1\242"+
    "\4\0\1\242\2\0\1\74\5\0\2\242\1\75\3\0"+
    "\2\242\1\0\1\242\33\0\1\117\12\0\1\117\1\0"+
    "\1\74\1\75\1\117\16\0\1\74\7\0\1\75\42\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\5\13\1\244\23\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\245\5\13\1\246\3\13"+
    "\1\247\16\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\6\13\1\250\22\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\14\13"+
    "\1\251\5\13\1\252\6\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\26\13\1\253\2\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\6\13\1\254\22\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\30\13\1\255\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\256\1\257\27\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\260\30\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\21\13"+
    "\1\261\7\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\16\13\1\262\12\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\4\13"+
    "\1\263\24\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\13\13\1\264\5\13\1\265\7\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\26\13\1\266\2\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\13\1\267\2\13"+
    "\1\270\24\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\5\13\1\271\23\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\13\13"+
    "\1\272\15\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\273\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\6\13"+
    "\1\274\17\13\1\275\2\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\3\13\1\276\25\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\16\13\1\277\12\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\14\13\1\300\10\13"+
    "\1\301\3\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\13\1\302\27\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\16\13"+
    "\1\303\12\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\14\13\1\304\14\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\4\13"+
    "\1\305\16\13\1\306\5\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\5\13\1\307\14\13"+
    "\1\310\6\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\7\13\1\311\21\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\27\13"+
    "\1\312\1\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\313\25\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\1\13"+
    "\1\314\27\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\315\1\316\24\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\6\13\1\317\22\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\11\13\1\320\17\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\24\13\1\321\4\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\11\13\1\322\17\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\3\13\1\323\6\13\1\324\7\13\1\325\6\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\13\13\1\326\15\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\14\13\1\327\14\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\5\13\1\330\23\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\11\13\1\331\17\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\16\13\1\332\12\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\6\13\1\333\22\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\5\13\1\334\1\335\22\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\336\30\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\14\13\1\337\14\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\340\10\13\1\341\17\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\1\13\1\342\27\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\4\13\1\343\11\13"+
    "\1\344\12\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\20\13\1\345\10\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\4\13"+
    "\1\346\24\13\117\0\1\347\110\0\1\350\16\0\1\233"+
    "\12\0\1\233\3\0\1\233\2\0\1\76\1\77\1\100"+
    "\15\0\1\100\2\0\1\76\4\0\1\77\35\0\4\234"+
    "\1\0\25\234\1\0\56\234\4\235\1\0\25\235\1\0"+
    "\56\235\3\105\1\351\1\105\1\236\103\105\10\0\1\114"+
    "\101\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\1\13\1\352\27\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\353\30\13\25\0"+
    "\1\242\12\0\2\242\1\74\1\75\1\242\1\0\3\242"+
    "\1\0\1\354\1\242\1\0\1\102\2\0\1\242\2\0"+
    "\1\74\5\0\2\242\1\75\3\0\2\242\1\0\1\242"+
    "\3\0\1\102\27\0\1\354\12\0\2\354\2\0\1\354"+
    "\1\0\3\354\2\0\1\354\4\0\1\354\10\0\2\354"+
    "\4\0\2\354\1\0\1\354\33\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\6\13\1\355\22\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\17\13\1\356\11\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\13\13\1\357\15\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\16\13\1\360\12\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\2\13\1\361\26\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\10\13\1\362\20\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\3\13\1\363\25\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\11\13\1\364\17\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\11\13\1\365\17\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\6\13\1\366\13\13\1\367\6\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\4\13"+
    "\1\370\6\13\1\371\15\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\3\13\1\372\25\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\6\13\1\373\22\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\13\1\374\27\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\6\13\1\375\22\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\11\13\1\376\17\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\11\13\1\377\17\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\16\13\1\u0100\12\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\5\13\1\u0101\23\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\11\13\1\u0102\17\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\7\13\1\u0103\21\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\14\13\1\u0104\14\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\11\13\1\u0105\17\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\3\13\1\u0106\25\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\5\13\1\264\23\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\u0107\30\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\u0108\30\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\u0109\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\u010a\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\14\13\1\u010b\14\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\6\13"+
    "\1\u010c\22\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\14\13\1\u010d\14\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\16\13"+
    "\1\u010e\12\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\u010f\30\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\23\13\1\u0110"+
    "\5\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\11\13\1\u0111\17\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\3\13\1\u0112"+
    "\25\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\6\13\1\u0113\22\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\1\u0114\30\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\17\13\1\u0115\11\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\13\1\u0116\27\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\11\13\1\u0117\17\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\13\1\u0118\27\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\11\13\1\u0119\17\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\u011a\30\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\4\13\1\u011b\24\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\20\13\1\u011c\10\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\u011d\30\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\u011e\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\1\u011f"+
    "\30\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\3\13\1\u0120\25\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\11\13\1\u0121"+
    "\17\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\11\13\1\u0122\17\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\22\13\1\u0123"+
    "\6\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\5\13\1\u0124\23\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\5\13\1\u0125"+
    "\1\u0126\22\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\13\1\u0127\27\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\22\13"+
    "\1\u0128\6\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\u0129\30\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\15\13\1\u012a"+
    "\13\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\6\13\1\u012b\22\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\3\13\1\u012c"+
    "\25\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\3\13\1\u012d\25\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\2\13\1\u012e"+
    "\26\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\10\13\1\u012f\20\13\25\0\1\354\12\0"+
    "\2\354\2\0\1\354\1\0\3\354\2\0\1\354\1\0"+
    "\1\102\2\0\1\354\10\0\2\354\4\0\2\354\1\0"+
    "\1\354\3\0\1\102\27\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\13\1\u0130\27\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\16\13\1\u0131\12\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\13\1\u0132\27\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\4\13\1\u0133\24\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\13\1\u0134\27\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\16\13\1\u0135\12\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\4\13\1\u0136\24\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\10\13\1\u0137\20\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\14\13\1\u0138\14\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\22\13\1\u0139\6\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\11\13\1\u013a\17\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\11\13\1\u013b\17\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\6\13\1\u013c\22\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\22\13\1\u013d\6\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\16\13\1\u013e\12\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\27\13\1\u013f\1\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\6\13\1\u0140\22\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\13\1\u0141\27\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\4\13\1\u0142\24\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\6\13\1\u0143\22\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\3\13\1\u0144\25\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\17\13\1\u0145\11\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\1\u0146\30\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\2\13"+
    "\1\u0147\26\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\2\13\1\u0148\26\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\1\13"+
    "\1\u0149\27\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\12\13\1\u014a\16\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\u014b\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\5\13\1\u014c\23\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\13\13"+
    "\1\u014d\15\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\6\13\1\u014e\22\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\1\13"+
    "\1\u014f\27\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\22\13\1\u0150\6\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\1\u0151"+
    "\30\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\2\13\1\u0152\26\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\13\13\1\u0153"+
    "\15\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\7\13\1\u0154\21\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\3\13\1\u0155"+
    "\25\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\7\13\1\u0156\21\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\10\13\1\u0157"+
    "\20\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\23\13\1\u0158\5\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\5\13\1\u0159"+
    "\23\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\6\13\1\u015a\22\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\4\13\1\u015b"+
    "\24\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\10\13\1\u015c\20\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\7\13\1\u015d"+
    "\21\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\1\u015e\30\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\11\13\1\u015f\17\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\4\13\1\u0160\24\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\11\13\1\u0161\17\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\3\13\1\u0162\25\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\11\13\1\u0163\17\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\1\u0164\30\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\14\13\1\u0165\14\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\14\13\1\u0166\14\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\22\13\1\u0167\6\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\12\13\1\u0168\1\13\1\u0169\14\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\12\13\1\u016a"+
    "\16\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\22\13\1\u016b\6\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\1\u016c\30\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\2\13\1\u016d\26\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\6\13\1\u016e\22\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\17\13\1\u016f\11\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\23\13\1\u0170\5\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\12\13\1\u0171\16\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\14\13\1\u0172\14\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\22\13\1\u0173\6\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\3\13\1\u0174\25\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\22\13\1\u0175\6\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\6\13\1\u0176\22\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\11\13\1\u0177\17\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\22\13\1\u0178\6\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\26\13\1\u0179\2\13\25\0\1\13\10\0\14\13"+
    "\1\0\1\13\1\0\1\13\2\0\1\u017a\30\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\4\13\1\u017b\24\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\4\13\1\u017c\24\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\6\13\1\u017d\22\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\6\13\1\u017e\22\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\u017f\30\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\u0180\25\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\1\u0181"+
    "\30\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\11\13\1\u0182\17\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\4\13\1\u0183"+
    "\24\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\14\13\1\u0184\14\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\11\13\1\u0185"+
    "\17\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\5\13\1\u0186\23\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\6\13\1\u0187"+
    "\22\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\22\13\1\u0188\6\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\22\13\1\u0189"+
    "\6\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\4\13\1\u018a\24\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\1\13\1\u018b"+
    "\27\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\22\13\1\u018c\6\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\3\13\1\u018d"+
    "\25\13\25\0\1\13\10\0\14\13\1\0\1\13\1\0"+
    "\1\13\2\0\4\13\1\u018e\24\13\25\0\1\13\10\0"+
    "\14\13\1\0\1\13\1\0\1\13\2\0\1\u018f\30\13"+
    "\25\0\1\13\10\0\14\13\1\0\1\13\1\0\1\13"+
    "\2\0\1\u0190\30\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\3\13\1\u0191\25\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\4\13\1\u0192\24\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\21\13\1\u0193\7\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\23\13\1\u0194\5\13\25\0\1\13\10\0\14\13\1\0"+
    "\1\13\1\0\1\13\2\0\10\13\1\u0195\20\13\25\0"+
    "\1\13\10\0\14\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\u0196\30\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\u0197\25\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\3\13"+
    "\1\u0198\25\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\17\13\1\u0199\11\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\16\13"+
    "\1\u019a\12\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\6\13\1\u019b\22\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\6\13"+
    "\1\u019c\22\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\u019d\25\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\22\13"+
    "\1\u019e\6\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\13\13\1\u019f\15\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\17\13"+
    "\1\u01a0\11\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\u01a1\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\6\13"+
    "\1\u01a2\22\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\5\13\1\u01a3\23\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\u01a4\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\6\13\1\u01a5\22\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\21\13"+
    "\1\u01a6\7\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\6\13\1\u01a7\22\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\22\13"+
    "\1\u01a8\6\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\u01a9\25\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\3\13"+
    "\1\u01aa\25\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\6\13\1\u01ab\22\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\u01ac\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\22\13\1\u01ad\6\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\u01ae\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\u01af\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\1\13"+
    "\1\u01b0\27\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\u01b1\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\u01b2\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\u01b3\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\6\13"+
    "\1\u01b4\22\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\12\13\1\u01b5\16\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\11\13"+
    "\1\u01b6\17\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\16\13\1\u01b7\12\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\17\13"+
    "\1\u01b8\11\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\11\13\1\u01b9\17\13\25\0\1\13"+
    "\10\0\14\13\1\0\1\13\1\0\1\13\2\0\17\13"+
    "\1\u01ba\11\13\25\0\1\13\10\0\14\13\1\0\1\13"+
    "\1\0\1\13\2\0\22\13\1\u01bb\6\13\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23871];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\15\1\1\11\22\1\6\11\11\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\3\1\3\11"+
    "\5\1\3\11\2\1\1\11\1\0\3\1\3\11\66\1"+
    "\13\11\1\0\1\11\1\0\4\11\3\1\1\0\4\1"+
    "\1\0\103\1\3\11\2\1\1\0\317\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CSharpLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1790) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return CSharpTokens.MULEQ;
          }
        case 145: break;
        case 81: 
          { return CSharpTokens.THIS_KEYWORD;
          }
        case 146: break;
        case 29: 
          { return CSharpTokens.EXCL;
          }
        case 147: break;
        case 3: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 148: break;
        case 88: 
          { return CSharpTokens.BOOL_KEYWORD;
          }
        case 149: break;
        case 11: 
          { yypushback(yylength());
		yybegin(MACRO);
          }
        case 150: break;
        case 68: 
          { return CSharpTokens.VERBATIM_STRING_LITERAL;
          }
        case 151: break;
        case 70: 
          { return CSharpTokens.INT_KEYWORD;
          }
        case 152: break;
        case 51: 
          { return CSharpTokens.EQEQ;
          }
        case 153: break;
        case 66: 
          { return CSharpTokens.ULONG_LITERAL;
          }
        case 154: break;
        case 143: 
          { return CSharpTokens.PROTECTED_KEYWORD;
          }
        case 155: break;
        case 55: 
          { return CSharpTokens.PLUSPLUS;
          }
        case 156: break;
        case 108: 
          { return CSharpTokens.STRING_KEYWORD;
          }
        case 157: break;
        case 134: 
          { return CSharpTokens.OVERRIDE_KEYWORD;
          }
        case 158: break;
        case 119: 
          { return CSharpTokens.PUBLIC_KEYWORD;
          }
        case 159: break;
        case 113: 
          { return CSharpTokens.EXTERN_KEYWORD;
          }
        case 160: break;
        case 126: 
          { return CSharpTokens.CHECKED_KEYWORD;
          }
        case 161: break;
        case 18: 
          { return CSharpTokens.EQ;
          }
        case 162: break;
        case 79: 
          { return CSharpTokens.LOCK_KEYWORD;
          }
        case 163: break;
        case 91: 
          { return CSharpTokens.CHAR_KEYWORD;
          }
        case 164: break;
        case 87: 
          { return CSharpTokens.BASE_KEYWORD;
          }
        case 165: break;
        case 56: 
          { return CSharpTokens.ANDEQ;
          }
        case 166: break;
        case 17: 
          { return CSharpTokens.RPAR;
          }
        case 167: break;
        case 31: 
          { return CSharpTokens.QUEST;
          }
        case 168: break;
        case 57: 
          { return CSharpTokens.ANDAND;
          }
        case 169: break;
        case 83: 
          { return CSharpTokens.ENUM_KEYWORD;
          }
        case 170: break;
        case 62: 
          { return CSharpTokens.GTEQ;
          }
        case 171: break;
        case 84: 
          { return CSharpTokens.UINT_KEYWORD;
          }
        case 172: break;
        case 144: 
          { return CSharpTokens.STACKALLOC_KEYWORD;
          }
        case 173: break;
        case 47: 
          { return CSharpTokens.IS_KEYWORD;
          }
        case 174: break;
        case 132: 
          { return CSharpTokens.EXPLICIT_KEYWORD;
          }
        case 175: break;
        case 64: 
          { return CSharpTokens.NTEQ;
          }
        case 176: break;
        case 121: 
          { return CSharpTokens.FOREACH_KEYWORD;
          }
        case 177: break;
        case 99: 
          { return CSharpTokens.USING_KEYWORD;
          }
        case 178: break;
        case 34: 
          { return CSharpTokens.LONG_LITERAL;
          }
        case 179: break;
        case 133: 
          { return CSharpTokens.VOLATILE_KEYWORD;
          }
        case 180: break;
        case 2: 
          { return CSharpTokens.INTEGER_LITERAL;
          }
        case 181: break;
        case 106: 
          { return CSharpTokens.SIZEOF_KEYWORD;
          }
        case 182: break;
        case 71: 
          { return CSharpTokens.TRY_KEYWORD;
          }
        case 183: break;
        case 41: 
          { return CSharpTokens.DIVEQ;
          }
        case 184: break;
        case 13: 
          { return CSharpTokens.RBRACE;
          }
        case 185: break;
        case 35: 
          { return CSharpTokens.UINTEGER_LITERAL;
          }
        case 186: break;
        case 140: 
          { return CSharpTokens.INTERFACE_KEYWORD;
          }
        case 187: break;
        case 114: 
          { return CSharpTokens.USHORT_KEYWORD;
          }
        case 188: break;
        case 26: 
          { return CSharpTokens.COLON;
          }
        case 189: break;
        case 33: 
          { yybegin(YYINITIAL); return CSharpTemplateTokens.MACRO_FRAGMENT;
          }
        case 190: break;
        case 109: 
          { return CSharpTokens.STRUCT_KEYWORD;
          }
        case 191: break;
        case 111: 
          { return CSharpTokens.SWITCH_KEYWORD;
          }
        case 192: break;
        case 4: 
          { return CSharpTokens.DIV;
          }
        case 193: break;
        case 60: 
          { return CSharpTokens.OROR;
          }
        case 194: break;
        case 24: 
          { return CSharpTokens.LT;
          }
        case 195: break;
        case 77: 
          { return CSharpTokens.GOTO_KEYWORD;
          }
        case 196: break;
        case 96: 
          { return CSharpTokens.FLOAT_KEYWORD;
          }
        case 197: break;
        case 76: 
          { return CSharpTokens.GTGTEQ;
          }
        case 198: break;
        case 12: 
          { return CSharpTokens.LBRACE;
          }
        case 199: break;
        case 37: 
          { return CSharpTokens.DOUBLE_LITERAL;
          }
        case 200: break;
        case 137: 
          { return CSharpTokens.CONTINUE_KEYWORD;
          }
        case 201: break;
        case 104: 
          { return CSharpTokens.WHILE_KEYWORD;
          }
        case 202: break;
        case 112: 
          { return CSharpTokens.TYPEOF_KEYWORD;
          }
        case 203: break;
        case 138: 
          { return CSharpTokens.__ARGLIST_KEYWORD;
          }
        case 204: break;
        case 38: 
          { return CSharpTokens.DECIMAL_LITERAL;
          }
        case 205: break;
        case 136: 
          { return CSharpTokens.DELEGATE_KEYWORD;
          }
        case 206: break;
        case 9: 
          { return CSharpTokens.DOT;
          }
        case 207: break;
        case 139: 
          { return CSharpTokens.__MAKEREF_KEYWORD;
          }
        case 208: break;
        case 90: 
          { return CSharpTokens.CASE_KEYWORD;
          }
        case 209: break;
        case 52: 
          { return CSharpTokens.DARROW;
          }
        case 210: break;
        case 50: 
          { return CSharpTokens.DO_KEYWORD;
          }
        case 211: break;
        case 82: 
          { return CSharpTokens.ELSE_KEYWORD;
          }
        case 212: break;
        case 116: 
          { return CSharpTokens.OBJECT_KEYWORD;
          }
        case 213: break;
        case 123: 
          { return CSharpTokens.DEFAULT_KEYWORD;
          }
        case 214: break;
        case 98: 
          { return CSharpTokens.ULONG_KEYWORD;
          }
        case 215: break;
        case 59: 
          { return CSharpTokens.OREQ;
          }
        case 216: break;
        case 45: 
          { return CSharpTokens.ARROW;
          }
        case 217: break;
        case 40: 
          { return CSharpTokens.BLOCK_COMMENT;
          }
        case 218: break;
        case 69: 
          { return CSharpTokens.REF_KEYWORD;
          }
        case 219: break;
        case 125: 
          { return CSharpTokens.DYNAMIC_KEYWORD;
          }
        case 220: break;
        case 115: 
          { return CSharpTokens.UNSAFE_KEYWORD;
          }
        case 221: break;
        case 78: 
          { return CSharpTokens.LONG_KEYWORD;
          }
        case 222: break;
        case 100: 
          { return CSharpTokens.BREAK_KEYWORD;
          }
        case 223: break;
        case 10: 
          { return CSharpTokens.MINUS;
          }
        case 224: break;
        case 53: 
          { return CSharpTokens.PERCEQ;
          }
        case 225: break;
        case 130: 
          { return CSharpTokens.IMPLICIT_KEYWORD;
          }
        case 226: break;
        case 107: 
          { return CSharpTokens.STATIC_KEYWORD;
          }
        case 227: break;
        case 30: 
          { return CSharpTokens.COMMA;
          }
        case 228: break;
        case 85: 
          { return CSharpTokens.NULL_LITERAL;
          }
        case 229: break;
        case 21: 
          { return CSharpTokens.AND;
          }
        case 230: break;
        case 20: 
          { return CSharpTokens.PLUS;
          }
        case 231: break;
        case 43: 
          { return CSharpTokens.MINUSMINUS;
          }
        case 232: break;
        case 46: 
          { return CSharpTokens.AS_KEYWORD;
          }
        case 233: break;
        case 73: 
          { return CSharpTokens.NEW_KEYWORD;
          }
        case 234: break;
        case 128: 
          { return CSharpTokens.ABSTRACT_KEYWORD;
          }
        case 235: break;
        case 39: 
          { return CSharpTokens.LINE_COMMENT;
          }
        case 236: break;
        case 101: 
          { return CSharpTokens.CATCH_KEYWORD;
          }
        case 237: break;
        case 94: 
          { return CSharpTokens.THROW_KEYWORD;
          }
        case 238: break;
        case 110: 
          { return CSharpTokens.SEALED_KEYWORD;
          }
        case 239: break;
        case 15: 
          { return CSharpTokens.RBRACKET;
          }
        case 240: break;
        case 6: 
          { return CSharpTokens.CHARACTER_LITERAL;
          }
        case 241: break;
        case 28: 
          { return CSharpTokens.TILDE;
          }
        case 242: break;
        case 72: 
          { return CSharpTokens.FOR_KEYWORD;
          }
        case 243: break;
        case 8: 
          { return CSharpTokens.IDENTIFIER;
          }
        case 244: break;
        case 105: 
          { return CSharpTokens.RETURN_KEYWORD;
          }
        case 245: break;
        case 14: 
          { return CSharpTokens.LBRACKET;
          }
        case 246: break;
        case 89: 
          { return CSharpTokens.BYTE_KEYWORD;
          }
        case 247: break;
        case 97: 
          { return CSharpTokens.FIXED_KEYWORD;
          }
        case 248: break;
        case 49: 
          { return CSharpTokens.IN_KEYWORD;
          }
        case 249: break;
        case 1: 
          { return CSharpTokens.BAD_CHARACTER;
          }
        case 250: break;
        case 80: 
          { return CSharpTokens.BOOL_LITERAL;
          }
        case 251: break;
        case 117: 
          { return CSharpTokens.DOUBLE_KEYWORD;
          }
        case 252: break;
        case 44: 
          { return CSharpTokens.MINUSEQ;
          }
        case 253: break;
        case 61: 
          { return CSharpTokens.LTEQ;
          }
        case 254: break;
        case 27: 
          { return CSharpTokens.SEMICOLON;
          }
        case 255: break;
        case 127: 
          { return CSharpTokens.PRIVATE_KEYWORD;
          }
        case 256: break;
        case 102: 
          { return CSharpTokens.CLASS_KEYWORD;
          }
        case 257: break;
        case 92: 
          { return CSharpTokens.SBYTE_KEYWORD;
          }
        case 258: break;
        case 124: 
          { return CSharpTokens.DECIMAL_KEYWORD;
          }
        case 259: break;
        case 7: 
          { return CSharpTokens.STRING_LITERAL;
          }
        case 260: break;
        case 63: 
          { return CSharpTokens.COLONCOLON;
          }
        case 261: break;
        case 122: 
          { return CSharpTokens.VIRTUAL_KEYWORD;
          }
        case 262: break;
        case 75: 
          { return CSharpTokens.LTLTEQ;
          }
        case 263: break;
        case 58: 
          { return CSharpTokens.XOREQ;
          }
        case 264: break;
        case 16: 
          { return CSharpTokens.LPAR;
          }
        case 265: break;
        case 141: 
          { return CSharpTokens.UNCHECKED_KEYWORD;
          }
        case 266: break;
        case 142: 
          { return CSharpTokens.NAMESPACE_KEYWORD;
          }
        case 267: break;
        case 25: 
          { return CSharpTokens.GT;
          }
        case 268: break;
        case 135: 
          { return CSharpTokens.OPERATOR_KEYWORD;
          }
        case 269: break;
        case 54: 
          { return CSharpTokens.PLUSEQ;
          }
        case 270: break;
        case 103: 
          { return CSharpTokens.CONST_KEYWORD;
          }
        case 271: break;
        case 86: 
          { return CSharpTokens.VOID_KEYWORD;
          }
        case 272: break;
        case 129: 
          { return CSharpTokens.READONLY_KEYWORD;
          }
        case 273: break;
        case 19: 
          { return CSharpTokens.PERC;
          }
        case 274: break;
        case 48: 
          { return CSharpTokens.IF_KEYWORD;
          }
        case 275: break;
        case 118: 
          { return CSharpTokens.PARAMS_KEYWORD;
          }
        case 276: break;
        case 32: 
          { return CSharpTemplateTokens.MACRO_FRAGMENT;
          }
        case 277: break;
        case 22: 
          { return CSharpTokens.XOR;
          }
        case 278: break;
        case 95: 
          { return CSharpTokens.EVENT_KEYWORD;
          }
        case 279: break;
        case 36: 
          { return CSharpTokens.FLOAT_LITERAL;
          }
        case 280: break;
        case 67: 
          { return CSharpTokensImpl.LINE_DOC_COMMENT;
          }
        case 281: break;
        case 65: 
          { return CSharpTokens.NULLABE_CALL;
          }
        case 282: break;
        case 93: 
          { return CSharpTokens.SHORT_KEYWORD;
          }
        case 283: break;
        case 74: 
          { return CSharpTokens.OUT_KEYWORD;
          }
        case 284: break;
        case 23: 
          { return CSharpTokens.OR;
          }
        case 285: break;
        case 5: 
          { return CSharpTokens.MUL;
          }
        case 286: break;
        case 120: 
          { return CSharpTokens.FINALLY_KEYWORD;
          }
        case 287: break;
        case 131: 
          { return CSharpTokens.INTERNAL_KEYWORD;
          }
        case 288: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
