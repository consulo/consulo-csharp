/* The following code was generated by JFlex 1.4.4 on 31.10.15 7:29 */

package org.mustbe.consulo.csharp.lang.lexer;

import org.mustbe.consulo.csharp.lang.psi.CSharpPreprocessorLazyTokens;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokensImpl;
import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 31.10.15 7:29 from the specification file
 * <tt>R:/_github.com/consulo/consulo-csharp/csharp-psi-impl/src/org/mustbe/consulo/csharp/lang/lexer/_CSharpLexer.flex</tt>
 */
public class _CSharpLexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREPROCESSOR_DIRECTIVE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\5\1\3\1\0\1\5\1\6\16\15\4\0\1\5\1\107"+
    "\1\11\1\34\1\13\1\75\1\77\1\7\1\72\1\73\1\4\1\76"+
    "\1\110\1\32\1\30\1\2\1\22\11\1\1\104\1\105\1\102\1\74"+
    "\1\103\1\111\1\12\1\17\1\24\1\17\1\26\1\31\1\25\5\14"+
    "\1\20\1\27\2\14\1\33\4\14\1\21\2\14\1\23\2\14\1\70"+
    "\1\10\1\71\1\100\1\16\1\0\1\35\1\57\1\60\1\56\1\46"+
    "\1\47\1\37\1\61\1\41\1\62\1\45\1\40\1\44\1\54\1\55"+
    "\1\51\1\14\1\36\1\42\1\43\1\53\1\52\1\64\1\63\1\50"+
    "\1\65\1\66\1\101\1\67\1\106\41\15\2\0\4\14\4\0\1\14"+
    "\2\0\1\15\7\0\1\14\4\0\1\14\5\0\27\14\1\0\37\14"+
    "\1\0\u013f\14\31\0\162\14\4\0\14\14\16\0\5\14\11\0\1\14"+
    "\21\0\130\15\5\0\23\15\12\0\1\14\13\0\1\14\1\0\3\14"+
    "\1\0\1\14\1\0\24\14\1\0\54\14\1\0\46\14\1\0\5\14"+
    "\4\0\202\14\1\0\4\15\3\0\105\14\1\0\46\14\2\0\2\14"+
    "\6\0\20\14\41\0\46\14\2\0\1\14\7\0\47\14\11\0\21\15"+
    "\1\0\27\15\1\0\3\15\1\0\1\15\1\0\2\15\1\0\1\15"+
    "\13\0\33\14\5\0\3\14\15\0\4\15\14\0\6\15\13\0\32\14"+
    "\5\0\13\14\16\15\7\0\12\15\4\0\2\14\1\15\143\14\1\0"+
    "\1\14\10\15\1\0\6\15\2\14\2\15\1\0\4\15\2\14\12\15"+
    "\3\14\2\0\1\14\17\0\1\15\1\14\1\15\36\14\33\15\2\0"+
    "\3\14\60\0\46\14\13\15\1\14\u014f\0\3\15\66\14\2\0\1\15"+
    "\1\14\20\15\2\0\1\14\4\15\3\0\12\14\2\15\2\0\12\15"+
    "\21\0\3\15\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\1\14\3\0\4\14\2\0\1\15\1\14\7\15\2\0\2\15"+
    "\2\0\3\15\11\0\1\15\4\0\2\14\1\0\3\14\2\15\2\0"+
    "\12\15\4\14\15\0\3\15\1\0\6\14\4\0\2\14\2\0\26\14"+
    "\1\0\7\14\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\15"+
    "\1\0\5\15\4\0\2\15\2\0\3\15\13\0\4\14\1\0\1\14"+
    "\7\0\14\15\3\14\14\0\3\15\1\0\11\14\1\0\3\14\1\0"+
    "\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\15\1\14"+
    "\10\15\1\0\3\15\1\0\3\15\2\0\1\14\17\0\2\14\2\15"+
    "\2\0\12\15\1\0\1\14\17\0\3\15\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\15"+
    "\1\14\6\15\3\0\2\15\2\0\3\15\10\0\2\15\4\0\2\14"+
    "\1\0\3\14\4\0\12\15\1\0\1\14\20\0\1\15\1\14\1\0"+
    "\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1\0"+
    "\2\14\3\0\2\14\3\0\3\14\3\0\10\14\1\0\3\14\4\0"+
    "\5\15\3\0\3\15\1\0\4\15\11\0\1\15\17\0\11\15\11\0"+
    "\1\14\7\0\3\15\1\0\10\14\1\0\3\14\1\0\27\14\1\0"+
    "\12\14\1\0\5\14\4\0\7\15\1\0\3\15\1\0\4\15\7\0"+
    "\2\15\11\0\2\14\4\0\12\15\22\0\2\15\1\0\10\14\1\0"+
    "\3\14\1\0\27\14\1\0\12\14\1\0\5\14\2\0\1\15\1\14"+
    "\7\15\1\0\3\15\1\0\4\15\7\0\2\15\7\0\1\14\1\0"+
    "\2\14\4\0\12\15\22\0\2\15\1\0\10\14\1\0\3\14\1\0"+
    "\27\14\1\0\20\14\4\0\6\15\2\0\3\15\1\0\4\15\11\0"+
    "\1\15\10\0\2\14\4\0\12\15\22\0\2\15\1\0\22\14\3\0"+
    "\30\14\1\0\11\14\1\0\1\14\2\0\7\14\3\0\1\15\4\0"+
    "\6\15\1\0\1\15\1\0\10\15\22\0\2\15\15\0\60\14\1\15"+
    "\2\14\7\15\4\0\10\14\10\15\1\0\12\15\47\0\2\14\1\0"+
    "\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0"+
    "\7\14\1\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0"+
    "\4\14\1\15\2\14\6\15\1\0\2\15\1\14\2\0\5\14\1\0"+
    "\1\14\1\0\6\15\2\0\12\15\2\0\2\14\42\0\1\14\27\0"+
    "\2\15\6\0\12\15\13\0\1\15\1\0\1\15\1\0\1\15\4\0"+
    "\2\15\10\14\1\0\42\14\6\0\24\15\1\0\2\15\4\14\4\0"+
    "\10\15\1\0\44\15\11\0\1\15\71\0\42\14\1\0\5\14\1\0"+
    "\2\14\1\0\7\15\3\0\4\15\6\0\12\15\6\0\6\14\4\15"+
    "\106\0\46\14\12\0\51\14\7\0\132\14\5\0\104\14\5\0\122\14"+
    "\6\0\7\14\1\0\77\14\1\0\1\14\1\0\4\14\2\0\7\14"+
    "\1\0\1\14\1\0\4\14\2\0\47\14\1\0\1\14\1\0\4\14"+
    "\2\0\37\14\1\0\1\14\1\0\4\14\2\0\7\14\1\0\1\14"+
    "\1\0\4\14\2\0\7\14\1\0\7\14\1\0\27\14\1\0\37\14"+
    "\1\0\1\14\1\0\4\14\2\0\7\14\1\0\47\14\1\0\23\14"+
    "\16\0\11\15\56\0\125\14\14\0\u026c\14\2\0\10\14\12\0\32\14"+
    "\5\0\113\14\3\0\3\14\17\0\15\14\1\0\4\14\3\15\13\0"+
    "\22\14\3\15\13\0\22\14\2\15\14\0\15\14\1\0\3\14\1\0"+
    "\2\15\14\0\64\14\40\15\3\0\1\14\3\0\2\14\1\15\2\0"+
    "\12\15\41\0\3\15\2\0\12\15\6\0\130\14\10\0\51\14\1\15"+
    "\126\0\35\14\3\0\14\15\4\0\14\15\12\0\12\15\36\14\2\0"+
    "\5\14\u038b\0\154\14\224\0\234\14\4\0\132\14\6\0\26\14\2\0"+
    "\6\14\2\0\46\14\2\0\6\14\2\0\10\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\37\14\2\0\65\14\1\0\7\14\1\0"+
    "\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14\4\0"+
    "\15\14\5\0\3\14\1\0\7\14\17\0\4\15\32\0\5\15\20\0"+
    "\2\14\23\0\1\14\13\0\4\15\6\0\6\15\1\0\1\14\15\0"+
    "\1\14\40\0\22\14\36\0\15\15\4\0\1\15\3\0\6\15\27\0"+
    "\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0\3\14\1\0"+
    "\7\14\3\0\3\14\5\0\5\14\26\0\44\14\u0e81\0\3\14\31\0"+
    "\11\14\6\15\1\0\5\14\2\0\5\14\4\0\126\14\2\0\2\15"+
    "\2\0\3\14\1\0\137\14\5\0\50\14\4\0\136\14\21\0\30\14"+
    "\70\0\20\14\u0200\0\u19b6\14\112\0\u51a6\14\132\0\u048d\14\u0773\0\u2ba4\14"+
    "\u215c\0\u012e\14\2\0\73\14\225\0\7\14\14\0\5\14\5\0\1\14"+
    "\1\15\12\14\1\0\15\14\1\0\5\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14\2\0\66\14"+
    "\50\0\15\14\3\0\20\15\20\0\4\15\17\0\2\14\30\0\3\14"+
    "\31\0\1\14\6\0\5\14\1\0\207\14\2\0\1\15\4\0\1\14"+
    "\13\0\12\15\7\0\32\14\4\0\1\14\1\0\32\14\12\0\132\14"+
    "\3\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\2\14"+
    "\3\0\2\14\22\0\3\15\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\1\3\11\1\2\1\12\1\13\1\14"+
    "\22\11\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\46\1\50"+
    "\1\51\1\52\1\53\2\7\2\10\2\0\1\11\2\2"+
    "\1\54\1\55\1\56\1\57\4\11\1\60\1\11\1\61"+
    "\1\62\43\11\1\63\11\11\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\0"+
    "\1\77\1\0\1\100\1\101\1\102\1\103\1\104\1\46"+
    "\1\50\1\105\1\0\1\106\1\107\3\11\1\2\1\0"+
    "\3\11\1\110\4\11\1\111\7\11\1\112\15\11\1\113"+
    "\16\11\1\114\3\11\1\115\21\11\1\116\1\117\1\51"+
    "\3\11\1\0\3\11\1\120\1\121\1\122\13\11\1\123"+
    "\2\11\1\124\1\125\1\11\1\126\15\11\1\127\1\11"+
    "\1\130\5\11\1\131\10\11\1\132\1\11\1\133\1\134"+
    "\1\135\4\11\1\136\20\11\1\137\1\140\2\11\1\141"+
    "\1\142\2\11\1\143\1\144\1\11\1\145\7\11\1\146"+
    "\1\147\14\11\1\150\1\151\1\152\1\153\2\11\1\154"+
    "\6\11\1\155\3\11\1\156\1\157\1\11\1\160\1\161"+
    "\1\162\1\163\1\164\1\165\3\11\1\166\2\11\1\167"+
    "\2\11\1\170\1\171\4\11\1\172\4\11\1\173\15\11"+
    "\1\174\1\175\1\176\1\11\1\177\6\11\1\200\1\201"+
    "\1\202\1\11\1\203\4\11\1\204\1\205\1\206\1\11"+
    "\1\207\1\11\1\210\1\11\1\211\2\11\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\1\11\1\220\1\221\1\11"+
    "\1\222\1\223\1\224\1\225\1\226";

  private static int [] zzUnpackAction() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\224\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\224\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862"+
    "\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\224\0\224\0\224"+
    "\0\224\0\224\0\224\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46"+
    "\0\u0b90\0\u0bda\0\u0c24\0\u0c6e\0\224\0\224\0\u0cb8\0\224"+
    "\0\u0d02\0\224\0\224\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\224"+
    "\0\224\0\224\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\224\0\224"+
    "\0\224\0\u0f9c\0\u0fe6\0\224\0\u1030\0\u107a\0\u10c4\0\u110e"+
    "\0\u1158\0\224\0\224\0\224\0\u0378\0\u11a2\0\u11ec\0\u1236"+
    "\0\u1280\0\u0378\0\u12ca\0\u0378\0\u1314\0\u135e\0\u13a8\0\u13f2"+
    "\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642"+
    "\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892"+
    "\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2"+
    "\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32"+
    "\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82"+
    "\0\u1fcc\0\u2016\0\224\0\224\0\224\0\224\0\224\0\224"+
    "\0\224\0\224\0\224\0\224\0\224\0\u2060\0\224\0\u20aa"+
    "\0\224\0\224\0\224\0\224\0\224\0\u20f4\0\u213e\0\u2188"+
    "\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8"+
    "\0\u2422\0\u246c\0\u24b6\0\u0378\0\u2500\0\u254a\0\u2594\0\u25de"+
    "\0\u2628\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e"+
    "\0\u0378\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34"+
    "\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84"+
    "\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4"+
    "\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc\0\u3046\0\u0378\0\u3090\0\u30da"+
    "\0\u3124\0\u0378\0\u316e\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0"+
    "\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530"+
    "\0\u357a\0\u35c4\0\u360e\0\224\0\224\0\224\0\u3658\0\u36a2"+
    "\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u0378\0\u0378\0\u0378"+
    "\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64"+
    "\0\u3aae\0\u3af8\0\u3b42\0\u0378\0\u3b8c\0\u3bd6\0\u0378\0\u0378"+
    "\0\u3c20\0\u0378\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc"+
    "\0\u3e26\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98\0\u3fe2\0\u0378"+
    "\0\u402c\0\u0378\0\u4076\0\u40c0\0\u410a\0\u4154\0\u419e\0\u0378"+
    "\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310\0\u435a\0\u43a4\0\u43ee"+
    "\0\u0378\0\u4438\0\u0378\0\u0378\0\u0378\0\u4482\0\u44cc\0\u4516"+
    "\0\u4560\0\u0378\0\u45aa\0\u45f4\0\u463e\0\u4688\0\u46d2\0\u471c"+
    "\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u4922\0\u496c"+
    "\0\u49b6\0\u4a00\0\u0378\0\u0378\0\u4a4a\0\u4a94\0\u0378\0\u0378"+
    "\0\u4ade\0\u4b28\0\u0378\0\u0378\0\u4b72\0\u0378\0\u4bbc\0\u4c06"+
    "\0\u4c50\0\u4c9a\0\u4ce4\0\u4d2e\0\u4d78\0\u0378\0\u0378\0\u4dc2"+
    "\0\u4e0c\0\u4e56\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012"+
    "\0\u505c\0\u50a6\0\u50f0\0\u0378\0\u0378\0\u0378\0\u0378\0\u513a"+
    "\0\u5184\0\u0378\0\u51ce\0\u5218\0\u5262\0\u52ac\0\u52f6\0\u5340"+
    "\0\u0378\0\u538a\0\u53d4\0\u541e\0\u0378\0\u0378\0\u5468\0\u0378"+
    "\0\u0378\0\u0378\0\u0378\0\u0378\0\u0378\0\u54b2\0\u54fc\0\u5546"+
    "\0\u0378\0\u5590\0\u55da\0\u0378\0\u5624\0\u566e\0\u0378\0\u0378"+
    "\0\u56b8\0\u5702\0\u574c\0\u5796\0\u0378\0\u57e0\0\u582a\0\u5874"+
    "\0\u58be\0\u0378\0\u5908\0\u5952\0\u599c\0\u59e6\0\u5a30\0\u5a7a"+
    "\0\u5ac4\0\u5b0e\0\u5b58\0\u5ba2\0\u5bec\0\u5c36\0\u5c80\0\u0378"+
    "\0\u0378\0\u0378\0\u5cca\0\u0378\0\u5d14\0\u5d5e\0\u5da8\0\u5df2"+
    "\0\u5e3c\0\u5e86\0\u0378\0\u0378\0\u0378\0\u5ed0\0\u0378\0\u5f1a"+
    "\0\u5f64\0\u5fae\0\u5ff8\0\u0378\0\u0378\0\u0378\0\u6042\0\u0378"+
    "\0\u608c\0\u0378\0\u60d6\0\u0378\0\u6120\0\u616a\0\u0378\0\u0378"+
    "\0\u0378\0\u0378\0\u0378\0\u0378\0\u61b4\0\u0378\0\u0378\0\u61fe"+
    "\0\u0378\0\u0378\0\u0378\0\u0378\0\u0378";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\3\1\13\1\14\1\15\1\16\1\3\1\17\3\16"+
    "\1\20\5\16\1\21\1\16\1\22\1\16\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\16\1\33"+
    "\1\34\1\16\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\3\16\1\45\1\16\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\3\72\1\73\1\72\1\74\1\75\103\72\113\0"+
    "\1\4\14\0\1\4\1\0\1\76\1\77\1\4\2\0"+
    "\1\100\1\101\1\102\1\103\1\104\6\0\1\76\3\0"+
    "\1\102\1\0\1\104\1\100\3\0\1\77\2\0\1\101"+
    "\35\0\1\105\1\0\1\106\67\0\1\107\111\0\1\110"+
    "\22\0\1\10\107\0\1\6\106\0\3\12\1\0\2\12"+
    "\1\0\1\111\1\112\101\12\3\13\1\0\2\13\1\0"+
    "\1\13\1\113\1\114\100\13\11\0\1\115\1\0\2\16"+
    "\1\0\4\16\1\0\5\16\1\0\1\16\1\0\1\16"+
    "\1\0\31\16\25\0\1\16\7\0\1\116\1\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\31\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\31\16"+
    "\25\0\1\16\11\0\3\16\1\117\11\16\1\0\1\16"+
    "\1\0\1\16\1\0\31\16\25\0\1\4\14\0\1\4"+
    "\1\0\1\76\1\77\1\4\1\120\1\121\1\100\1\101"+
    "\1\102\1\103\1\104\6\0\1\76\3\0\1\102\1\0"+
    "\1\104\1\100\3\0\1\77\2\0\1\101\1\121\3\0"+
    "\1\120\27\0\1\103\20\0\1\103\121\0\1\122\41\0"+
    "\1\123\6\0\1\124\7\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\5\16\1\125\14\16\1\126"+
    "\6\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\11\16\1\127\17\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\20\16\1\130"+
    "\10\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\20\16\1\131\10\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\5\16\1\132"+
    "\1\16\1\133\2\16\1\134\4\16\1\135\11\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\136\1\16\1\137\2\16\1\140\10\16\1\141"+
    "\1\16\1\142\2\16\1\143\1\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\16\1\144"+
    "\11\16\1\145\10\16\1\146\4\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\3\16\1\147"+
    "\11\16\1\150\1\16\1\151\6\16\1\152\2\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\153\2\16\1\154\1\155\13\16\1\156\10\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\157\1\160\14\16\1\161\12\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\4\16\1\162"+
    "\13\16\1\163\10\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\3\16\1\164\1\165\1\166"+
    "\11\16\1\167\11\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\170\10\16\1\171\4\16"+
    "\1\172\12\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\14\16\1\173\1\174\1\175\3\16"+
    "\1\176\6\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\11\16\1\177\1\16\1\200\4\16"+
    "\1\201\10\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\202\1\203\11\16\1\204\4\16"+
    "\1\205\10\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\206\2\16\1\207\14\16\1\210"+
    "\3\16\1\211\4\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\24\16\1\212\4\16\120\0"+
    "\1\213\6\0\1\214\102\0\1\215\111\0\1\216\1\0"+
    "\1\217\107\0\1\220\2\0\1\221\106\0\1\222\111\0"+
    "\1\223\4\0\1\224\104\0\1\225\5\0\1\226\103\0"+
    "\1\227\6\0\1\230\112\0\1\231\101\0\1\232\45\0"+
    "\1\233\60\0\1\234\5\0\1\74\107\0\1\73\127\0"+
    "\1\235\31\0\1\235\56\0\1\235\17\0\1\235\52\0"+
    "\1\103\14\0\1\103\3\0\1\103\2\0\1\100\1\101"+
    "\1\102\1\0\1\104\12\0\1\102\1\0\1\104\1\100"+
    "\6\0\1\101\34\0\1\236\14\0\1\236\3\0\1\236"+
    "\2\0\1\100\1\101\1\102\2\0\1\236\11\0\1\102"+
    "\2\0\1\100\6\0\1\101\17\0\1\236\13\0\2\237"+
    "\1\240\1\0\2\237\1\0\103\237\4\106\1\241\105\106"+
    "\3\12\1\0\2\12\1\0\103\12\3\13\1\0\2\13"+
    "\1\0\103\13\11\115\1\242\100\115\11\116\1\243\100\116"+
    "\1\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\244\1\245\5\16\1\246\21\16\25\0\1\247"+
    "\14\0\2\247\1\76\1\77\1\247\1\0\3\247\1\0"+
    "\1\250\1\247\3\0\1\247\2\0\1\76\5\0\2\247"+
    "\3\0\1\77\2\0\3\247\32\0\1\121\14\0\1\121"+
    "\1\0\1\76\1\77\1\121\15\0\1\76\12\0\1\77"+
    "\37\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\5\16\1\251\23\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\252\5\16\1\253"+
    "\3\16\1\254\16\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\6\16\1\255\22\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\17\16\1\256\3\16\1\257\5\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\14\16\1\260"+
    "\14\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\261\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\30\16\1\262"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\263\1\264\27\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\265\30\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\13\16\1\266\15\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\20\16\1\267\10\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\270\24\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\13\16\1\271\2\16\1\272"+
    "\12\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\14\16\1\273\14\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\16\1\274"+
    "\2\16\1\275\24\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\5\16\1\276\23\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\11\16\1\277\17\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\16\16\1\300\12\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\6\16\1\301\5\16\1\302\14\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\3\16\1\303"+
    "\25\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\20\16\1\304\10\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\17\16\1\305"+
    "\6\16\1\306\2\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\307\27\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\310\27\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\4\16\1\311\13\16\1\312"+
    "\10\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\22\16\1\313\6\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\16\1\314"+
    "\27\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\3\16\1\315\1\316\24\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\20\16"+
    "\1\317\10\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\17\16\1\320\11\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\4\16"+
    "\1\321\17\16\1\322\4\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\5\16\1\323\15\16"+
    "\1\324\5\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\7\16\1\325\21\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\27\16"+
    "\1\326\1\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\327\25\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\11\16"+
    "\1\330\17\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\11\16\1\331\17\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\6\16"+
    "\1\332\22\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\25\16\1\333\3\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\3\16"+
    "\1\334\6\16\1\335\10\16\1\336\5\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\17\16"+
    "\1\337\11\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\16\16\1\340\12\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\5\16"+
    "\1\341\23\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\11\16\1\342\17\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\6\16"+
    "\1\343\22\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\20\16\1\344\10\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\5\16"+
    "\1\345\1\346\22\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\347\30\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\17\16"+
    "\1\350\11\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\351\10\16\1\352\17\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\353\24\16\120\0\1\354\111\0\1\355\16\0"+
    "\1\236\14\0\1\236\3\0\1\236\2\0\1\100\1\101"+
    "\1\102\14\0\1\102\2\0\1\100\6\0\1\101\33\0"+
    "\3\237\1\0\2\237\1\0\103\237\3\240\1\0\2\240"+
    "\1\0\103\240\2\106\1\356\1\106\1\241\105\106\11\0"+
    "\1\115\111\0\1\116\101\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\357\27\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\11\16\1\360\17\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\361\30\16\25\0\1\247"+
    "\14\0\2\247\1\76\1\77\1\247\1\0\3\247\1\0"+
    "\1\362\1\247\1\0\1\104\1\0\1\247\2\0\1\76"+
    "\5\0\2\247\1\0\1\104\1\0\1\77\2\0\3\247"+
    "\32\0\1\362\14\0\2\362\2\0\1\362\1\0\3\362"+
    "\2\0\1\362\3\0\1\362\10\0\2\362\6\0\3\362"+
    "\32\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\6\16\1\363\22\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\21\16\1\364\7\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\16\16\1\365\12\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\20\16\1\366\10\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\2\16\1\367\26\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\10\16\1\370\20\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\3\16\1\371\25\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\11\16\1\372\17\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\11\16\1\373\17\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\6\16\1\374\14\16"+
    "\1\375\5\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\4\16\1\376\11\16\1\377\12\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\3\16\1\u0100\25\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\6\16\1\u0101\22\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\u0102\27\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\6\16\1\u0103\22\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\11\16\1\u0104\17\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\11\16\1\u0105\17\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\20\16\1\u0106\10\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\5\16\1\u0107\23\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\11\16\1\u0108\17\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\17\16\1\u0109\11\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\7\16\1\u010a\21\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\11\16\1\u010b\17\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\3\16\1\u010c\25\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\5\16\1\u010d\23\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\u010e\30\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\u010f\30\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\11\16"+
    "\1\u0110\17\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\11\16\1\u0111\17\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\1\u0112"+
    "\30\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\15\16\1\u0113\13\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\6\16\1\u0114"+
    "\22\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\3\16\1\u0115\25\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\6\16\1\u0116"+
    "\22\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\u0117\30\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\21\16\1\u0118\7\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\17\16\1\u0119\11\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\6\16\1\u011a\22\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\17\16\1\u011b\11\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\20\16\1\u011c\10\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\u011d\30\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\24\16\1\u011e\4\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\11\16\1\u011f\17\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\3\16\1\u0120\25\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\u0121\27\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\1\u0122\27\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\11\16\1\u0123\17\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\11\16\1\u0124\17\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\u0125\30\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\4\16\1\u0126\24\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\1\u0127"+
    "\30\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\22\16\1\u0128\6\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u0129"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\u012a\30\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\11\16\1\u012b\17\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\3\16\1\u012c\25\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\11\16\1\u012d\17\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\23\16\1\u012e\5\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\5\16\1\u012f\23\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\5\16\1\u0130\1\u0131\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\16\1\u0132"+
    "\27\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\23\16\1\u0133\5\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\3\16\1\u0134"+
    "\25\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\2\16\1\u0135\26\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\12\16\1\u0136"+
    "\16\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\10\16\1\u0137\20\16\25\0\1\362\14\0"+
    "\2\362\2\0\1\362\1\0\3\362\2\0\1\362\1\0"+
    "\1\104\1\0\1\362\10\0\2\362\1\0\1\104\4\0"+
    "\3\362\32\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\u0138\27\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\20\16\1\u0139"+
    "\10\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\u013a\27\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\4\16\1\u013b"+
    "\24\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\u013c\27\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\20\16\1\u013d"+
    "\10\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\4\16\1\u013e\24\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\10\16\1\u013f"+
    "\20\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\17\16\1\u0140\11\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\23\16\1\u0141"+
    "\5\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\11\16\1\u0142\17\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u0143"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\u0144\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\23\16\1\u0145"+
    "\5\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\20\16\1\u0146\10\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\27\16\1\u0147"+
    "\1\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\u0148\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\16\1\u0149"+
    "\27\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\4\16\1\u014a\24\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u014b"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\u014c\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\3\16\1\u014d"+
    "\25\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\21\16\1\u014e\7\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\u014f\30\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\7\16\1\u0150\21\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\u0151\30\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\11\16\1\u0152\17\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\4\16\1\u0153\24\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\16\16\1\u0154\12\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\6\16\1\u0155\22\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\2\16\1\u0156\26\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\2\16\1\u0157\26\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\u0158\27\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\12\16\1\u0159\16\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\11\16\1\u015a\17\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\5\16\1\u015b\23\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\u015c\30\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\u015d\27\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\23\16"+
    "\1\u015e\5\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\2\16\1\u015f\26\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\16\16"+
    "\1\u0160\12\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\7\16\1\u0161\21\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\7\16"+
    "\1\u0162\21\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\u0163\25\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\10\16"+
    "\1\u0164\20\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\24\16\1\u0165\4\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\5\16"+
    "\1\u0166\23\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\6\16\1\u0167\22\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\4\16"+
    "\1\u0168\24\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\10\16\1\u0169\20\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\11\16"+
    "\1\u016a\17\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\u016b\25\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\6\16"+
    "\1\u016c\6\16\1\u016d\13\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\11\16\1\u016e\17\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\u016f\30\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\17\16\1\u0170\11\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\17\16\1\u0171\11\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\23\16\1\u0172\5\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\12\16\1\u0173\4\16\1\u0174\11\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\12\16\1\u0175"+
    "\16\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\23\16\1\u0176\5\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\u0177\30\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\2\16\1\u0178\26\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\6\16\1\u0179\22\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\21\16\1\u017a\7\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\24\16\1\u017b\4\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\12\16\1\u017c\16\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\17\16\1\u017d\11\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\23\16\1\u017e\5\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\3\16\1\u017f\25\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\23\16\1\u0180\5\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\5\16\1\u0181\23\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\6\16\1\u0182\22\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\23\16\1\u0183\5\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\23\16\1\u0184\5\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\u0185\30\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\u0186\24\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\6\16\1\u0187\22\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\11\16\1\u0188\17\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\23\16\1\u0189\5\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\14\16\1\u018a\14\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\6\16\1\u018b\22\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\4\16\1\u018c\24\16\25\0\1\16\11\0\15\16\1\0"+
    "\1\16\1\0\1\16\1\0\6\16\1\u018d\22\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\u018e\30\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\u018f\25\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\1\u0190"+
    "\30\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\4\16\1\u0191\24\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u0192"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\17\16\1\u0193\11\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u0194"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\4\16\1\u0195\24\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\13\16\1\u0196"+
    "\15\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\u0197\30\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\1\u0198\27\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\23\16\1\u0199\5\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\3\16\1\u019a\25\16"+
    "\25\0\1\16\11\0\15\16\1\0\1\16\1\0\1\16"+
    "\1\0\4\16\1\u019b\24\16\25\0\1\16\11\0\15\16"+
    "\1\0\1\16\1\0\1\16\1\0\1\u019c\30\16\25\0"+
    "\1\16\11\0\15\16\1\0\1\16\1\0\1\16\1\0"+
    "\1\u019d\30\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\u019e\25\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\4\16"+
    "\1\u019f\24\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\13\16\1\u01a0\15\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\24\16"+
    "\1\u01a1\4\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\11\16\1\u01a2\17\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\6\16"+
    "\1\u01a3\22\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\u01a4\25\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\3\16"+
    "\1\u01a5\25\16\25\0\1\16\11\0\15\16\1\0\1\16"+
    "\1\0\1\16\1\0\10\16\1\u01a6\20\16\25\0\1\16"+
    "\11\0\15\16\1\0\1\16\1\0\1\16\1\0\1\u01a7"+
    "\30\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\20\16\1\u01a8\10\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\21\16\1\u01a9"+
    "\7\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\u01aa\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\6\16\1\u01ab"+
    "\22\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\3\16\1\u01ac\25\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\23\16\1\u01ad"+
    "\5\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\16\16\1\u01ae\12\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\21\16\1\u01af"+
    "\7\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\5\16\1\u01b0\23\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\14\16\1\u01b1"+
    "\14\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\3\16\1\u01b2\25\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u01b3"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\u01b4\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\13\16\1\u01b5"+
    "\15\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\u01b6\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\23\16\1\u01b7"+
    "\5\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\3\16\1\u01b8\25\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\3\16\1\u01b9"+
    "\25\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\6\16\1\u01ba\22\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u01bb"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\11\16\1\u01bc\17\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u01bd"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\23\16\1\u01be\5\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\1\16\1\u01bf"+
    "\27\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\11\16\1\u01c0\17\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u01c1"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\11\16\1\u01c2\17\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\6\16\1\u01c3"+
    "\22\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\11\16\1\u01c4\17\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\16\16\1\u01c5"+
    "\12\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\12\16\1\u01c6\16\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u01c7"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\20\16\1\u01c8\10\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\21\16\1\u01c9"+
    "\7\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\21\16\1\u01ca\7\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\11\16\1\u01cb"+
    "\17\16\25\0\1\16\11\0\15\16\1\0\1\16\1\0"+
    "\1\16\1\0\11\16\1\u01cc\17\16\25\0\1\16\11\0"+
    "\15\16\1\0\1\16\1\0\1\16\1\0\23\16\1\u01cd"+
    "\5\16\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\14\1\1\11\22\1\6\11"+
    "\11\1\2\11\1\1\1\11\1\1\2\11\4\1\3\11"+
    "\4\1\3\11\2\1\1\11\2\0\3\1\3\11\66\1"+
    "\13\11\1\0\1\11\1\0\5\11\3\1\1\0\6\1"+
    "\1\0\103\1\3\11\3\1\1\0\333\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean myEnteredNewLine = true;

  private IElementType returnElementType(IElementType type)
  {
    myEnteredNewLine = false;
    return type;
  }



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1790) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   private void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 105: 
          { return returnElementType(CSharpTokens.CATCH_KEYWORD);
          }
        case 151: break;
        case 30: 
          { return returnElementType(CSharpTokens.EXCL);
          }
        case 152: break;
        case 7: 
          { return returnElementType(CSharpTokens.CHARACTER_LITERAL);
          }
        case 153: break;
        case 94: 
          { return returnElementType(CSharpTokens.CHAR_KEYWORD);
          }
        case 154: break;
        case 6: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 155: break;
        case 75: 
          { return returnElementType(CSharpTokens.FOR_KEYWORD);
          }
        case 156: break;
        case 93: 
          { return returnElementType(CSharpTokens.CASE_KEYWORD);
          }
        case 157: break;
        case 117: 
          { return returnElementType(CSharpTokens.EXTERN_KEYWORD);
          }
        case 158: break;
        case 128: 
          { return returnElementType(CSharpTokens.DEFAULT_KEYWORD);
          }
        case 159: break;
        case 146: 
          { return returnElementType(CSharpTokens.PROTECTED_KEYWORD);
          }
        case 160: break;
        case 123: 
          { return returnElementType(CSharpTokens.DOUBLE_KEYWORD);
          }
        case 161: break;
        case 18: 
          { return returnElementType(CSharpTokens.RPAR);
          }
        case 162: break;
        case 89: 
          { return returnElementType(CSharpTokens.NULL_LITERAL);
          }
        case 163: break;
        case 54: 
          { return returnElementType(CSharpTokens.PERCEQ);
          }
        case 164: break;
        case 129: 
          { return returnElementType(CSharpTokens.DECIMAL_KEYWORD);
          }
        case 165: break;
        case 115: 
          { return returnElementType(CSharpTokens.SWITCH_KEYWORD);
          }
        case 166: break;
        case 22: 
          { return returnElementType(CSharpTokens.AND);
          }
        case 167: break;
        case 57: 
          { return returnElementType(CSharpTokens.ANDEQ);
          }
        case 168: break;
        case 41: 
          { return returnElementType(CSharpTokens.BLOCK_COMMENT);
          }
        case 169: break;
        case 67: 
          { return returnElementType(CSharpTokens.QUESTQUEST);
          }
        case 170: break;
        case 134: 
          { return returnElementType(CSharpTokens.IMPLICIT_KEYWORD);
          }
        case 171: break;
        case 149: 
          { return returnElementType(CSharpTokens.__REFVALUE_KEYWORD);
          }
        case 172: break;
        case 60: 
          { return returnElementType(CSharpTokens.OREQ);
          }
        case 173: break;
        case 109: 
          { return returnElementType(CSharpTokens.RETURN_KEYWORD);
          }
        case 174: break;
        case 97: 
          { return returnElementType(CSharpTokens.THROW_KEYWORD);
          }
        case 175: break;
        case 5: 
          { return returnElementType(CSharpTokens.MUL);
          }
        case 176: break;
        case 13: 
          { return returnElementType(CSharpTokens.LBRACE);
          }
        case 177: break;
        case 11: 
          { return returnElementType(CSharpTokens.MINUS);
          }
        case 178: break;
        case 140: 
          { return returnElementType(CSharpTokens.DELEGATE_KEYWORD);
          }
        case 179: break;
        case 135: 
          { return returnElementType(CSharpTokens.INTERNAL_KEYWORD);
          }
        case 180: break;
        case 55: 
          { return returnElementType(CSharpTokens.PLUSEQ);
          }
        case 181: break;
        case 101: 
          { return returnElementType(CSharpTokens.FIXED_KEYWORD);
          }
        case 182: break;
        case 80: 
          { return returnElementType(CSharpTokens.GOTO_KEYWORD);
          }
        case 183: break;
        case 122: 
          { return returnElementType(CSharpTokens.OBJECT_KEYWORD);
          }
        case 184: break;
        case 78: 
          { return returnElementType(CSharpTokens.LTLTEQ);
          }
        case 185: break;
        case 9: 
          { return returnElementType(CSharpTokens.IDENTIFIER);
          }
        case 186: break;
        case 137: 
          { return returnElementType(CSharpTokens.VOLATILE_KEYWORD);
          }
        case 187: break;
        case 148: 
          { return returnElementType(CSharpTokens.NAMESPACE_KEYWORD);
          }
        case 188: break;
        case 113: 
          { return returnElementType(CSharpTokens.STRUCT_KEYWORD);
          }
        case 189: break;
        case 132: 
          { return returnElementType(CSharpTokens.ABSTRACT_KEYWORD);
          }
        case 190: break;
        case 106: 
          { return returnElementType(CSharpTokens.CLASS_KEYWORD);
          }
        case 191: break;
        case 85: 
          { return returnElementType(CSharpTokens.ELSE_KEYWORD);
          }
        case 192: break;
        case 77: 
          { return returnElementType(CSharpTokens.OUT_KEYWORD);
          }
        case 193: break;
        case 50: 
          { return returnElementType(CSharpTokens.IN_KEYWORD);
          }
        case 194: break;
        case 46: 
          { return returnElementType(CSharpTokens.ARROW);
          }
        case 195: break;
        case 65: 
          { return returnElementType(CSharpTokens.NTEQ);
          }
        case 196: break;
        case 44: 
          { return returnElementType(CSharpTokens.MINUSMINUS);
          }
        case 197: break;
        case 82: 
          { return returnElementType(CSharpTokens.LOCK_KEYWORD);
          }
        case 198: break;
        case 86: 
          { return returnElementType(CSharpTokens.ENUM_KEYWORD);
          }
        case 199: break;
        case 40: 
          { return returnElementType(CSharpTokens.LINE_COMMENT);
          }
        case 200: break;
        case 10: 
          { return returnElementType(CSharpTokens.DOT);
          }
        case 201: break;
        case 83: 
          { return returnElementType(CSharpTokens.TRUE_KEYWORD);
          }
        case 202: break;
        case 91: 
          { return returnElementType(CSharpTokens.BYTE_KEYWORD);
          }
        case 203: break;
        case 45: 
          { return returnElementType(CSharpTokens.MINUSEQ);
          }
        case 204: break;
        case 116: 
          { return returnElementType(CSharpTokens.TYPEOF_KEYWORD);
          }
        case 205: break;
        case 118: 
          { return returnElementType(CSharpTokens.PARAMS_KEYWORD);
          }
        case 206: break;
        case 28: 
          { return returnElementType(CSharpTokens.SEMICOLON);
          }
        case 207: break;
        case 81: 
          { return returnElementType(CSharpTokens.LONG_KEYWORD);
          }
        case 208: break;
        case 70: 
          { return returnElementType(CSharpTokens.VERBATIM_STRING_LITERAL);
          }
        case 209: break;
        case 130: 
          { return returnElementType(CSharpTokens.DYNAMIC_KEYWORD);
          }
        case 210: break;
        case 43: 
          { return returnElementType(CSharpTokens.MULEQ);
          }
        case 211: break;
        case 8: 
          { return returnElementType(CSharpTokens.STRING_LITERAL);
          }
        case 212: break;
        case 36: 
          { return returnElementType(CSharpTokens.UINTEGER_LITERAL);
          }
        case 213: break;
        case 15: 
          { return returnElementType(CSharpTokens.LBRACKET);
          }
        case 214: break;
        case 34: 
          { myEnteredNewLine = true;
		yybegin(YYINITIAL);
		return CSharpPreprocessorLazyTokens.PREPROCESSOR_DIRECTIVE;
          }
        case 215: break;
        case 100: 
          { return returnElementType(CSharpTokens.FLOAT_KEYWORD);
          }
        case 216: break;
        case 133: 
          { return returnElementType(CSharpTokens.READONLY_KEYWORD);
          }
        case 217: break;
        case 88: 
          { return returnElementType(CSharpTokens.UINT_KEYWORD);
          }
        case 218: break;
        case 79: 
          { return returnElementType(CSharpTokens.GTGTEQ);
          }
        case 219: break;
        case 121: 
          { return returnElementType(CSharpTokens.UNSAFE_KEYWORD);
          }
        case 220: break;
        case 53: 
          { return returnElementType(CSharpTokens.DARROW);
          }
        case 221: break;
        case 87: 
          { return returnElementType(CSharpTokens.VOID_KEYWORD);
          }
        case 222: break;
        case 142: 
          { return returnElementType(CSharpTokens.__ARGLIST_KEYWORD);
          }
        case 223: break;
        case 51: 
          { return returnElementType(CSharpTokens.DO_KEYWORD);
          }
        case 224: break;
        case 12: 
          { if(myEnteredNewLine)
		{
			yypushback(yylength());
			yybegin(PREPROCESSOR_DIRECTIVE);
		}
		else
		{
			return CSharpTokens.BAD_CHARACTER;
		}
          }
        case 225: break;
        case 98: 
          { return returnElementType(CSharpTokens.EVENT_KEYWORD);
          }
        case 226: break;
        case 38: 
          { return returnElementType(CSharpTokens.DOUBLE_LITERAL);
          }
        case 227: break;
        case 33: 
          { return CSharpPreprocessorLazyTokens.PREPROCESSOR_DIRECTIVE;
          }
        case 228: break;
        case 39: 
          { return returnElementType(CSharpTokens.DECIMAL_LITERAL);
          }
        case 229: break;
        case 4: 
          { myEnteredNewLine = true; return CSharpTokens.WHITE_SPACE;
          }
        case 230: break;
        case 21: 
          { return returnElementType(CSharpTokens.PLUS);
          }
        case 231: break;
        case 47: 
          { return returnElementType(CSharpTokens.AS_KEYWORD);
          }
        case 232: break;
        case 136: 
          { return returnElementType(CSharpTokens.EXPLICIT_KEYWORD);
          }
        case 233: break;
        case 131: 
          { return returnElementType(CSharpTokens.CHECKED_KEYWORD);
          }
        case 234: break;
        case 107: 
          { return returnElementType(CSharpTokens.CONST_KEYWORD);
          }
        case 235: break;
        case 24: 
          { return returnElementType(CSharpTokens.OR);
          }
        case 236: break;
        case 120: 
          { return returnElementType(CSharpTokens.USHORT_KEYWORD);
          }
        case 237: break;
        case 63: 
          { return returnElementType(CSharpTokens.GTEQ);
          }
        case 238: break;
        case 84: 
          { return returnElementType(CSharpTokens.THIS_KEYWORD);
          }
        case 239: break;
        case 56: 
          { return returnElementType(CSharpTokens.PLUSPLUS);
          }
        case 240: break;
        case 102: 
          { return returnElementType(CSharpTokens.ULONG_KEYWORD);
          }
        case 241: break;
        case 17: 
          { return returnElementType(CSharpTokens.LPAR);
          }
        case 242: break;
        case 124: 
          { return returnElementType(CSharpTokens.FINALLY_KEYWORD);
          }
        case 243: break;
        case 31: 
          { return returnElementType(CSharpTokens.COMMA);
          }
        case 244: break;
        case 90: 
          { return returnElementType(CSharpTokens.BASE_KEYWORD);
          }
        case 245: break;
        case 111: 
          { return returnElementType(CSharpTokens.STATIC_KEYWORD);
          }
        case 246: break;
        case 64: 
          { return returnElementType(CSharpTokens.COLONCOLON);
          }
        case 247: break;
        case 42: 
          { return returnElementType(CSharpTokens.DIVEQ);
          }
        case 248: break;
        case 23: 
          { return returnElementType(CSharpTokens.XOR);
          }
        case 249: break;
        case 73: 
          { return returnElementType(CSharpTokens.INT_KEYWORD);
          }
        case 250: break;
        case 144: 
          { return returnElementType(CSharpTokens.__MAKEREF_KEYWORD);
          }
        case 251: break;
        case 114: 
          { return returnElementType(CSharpTokens.SEALED_KEYWORD);
          }
        case 252: break;
        case 71: 
          { return CSharpTokensImpl.INTERPOLATION_STRING_LITERAL;
          }
        case 253: break;
        case 49: 
          { return returnElementType(CSharpTokens.IF_KEYWORD);
          }
        case 254: break;
        case 27: 
          { return returnElementType(CSharpTokens.COLON);
          }
        case 255: break;
        case 32: 
          { return returnElementType(CSharpTokens.QUEST);
          }
        case 256: break;
        case 145: 
          { return returnElementType(CSharpTokens.INTERFACE_KEYWORD);
          }
        case 257: break;
        case 119: 
          { return returnElementType(CSharpTokens.PUBLIC_KEYWORD);
          }
        case 258: break;
        case 127: 
          { return returnElementType(CSharpTokens.VIRTUAL_KEYWORD);
          }
        case 259: break;
        case 48: 
          { return returnElementType(CSharpTokens.IS_KEYWORD);
          }
        case 260: break;
        case 141: 
          { return returnElementType(CSharpTokens.CONTINUE_KEYWORD);
          }
        case 261: break;
        case 108: 
          { return returnElementType(CSharpTokens.WHILE_KEYWORD);
          }
        case 262: break;
        case 126: 
          { return returnElementType(CSharpTokens.PRIVATE_KEYWORD);
          }
        case 263: break;
        case 35: 
          { return returnElementType(CSharpTokens.LONG_LITERAL);
          }
        case 264: break;
        case 147: 
          { return returnElementType(CSharpTokens.UNCHECKED_KEYWORD);
          }
        case 265: break;
        case 61: 
          { return returnElementType(CSharpTokens.OROR);
          }
        case 266: break;
        case 99: 
          { return returnElementType(CSharpTokens.FALSE_KEYWORD);
          }
        case 267: break;
        case 72: 
          { return returnElementType(CSharpTokens.REF_KEYWORD);
          }
        case 268: break;
        case 110: 
          { return returnElementType(CSharpTokens.SIZEOF_KEYWORD);
          }
        case 269: break;
        case 96: 
          { return returnElementType(CSharpTokens.SHORT_KEYWORD);
          }
        case 270: break;
        case 37: 
          { return returnElementType(CSharpTokens.FLOAT_LITERAL);
          }
        case 271: break;
        case 103: 
          { return returnElementType(CSharpTokens.USING_KEYWORD);
          }
        case 272: break;
        case 26: 
          { return returnElementType(CSharpTokens.GT);
          }
        case 273: break;
        case 76: 
          { return returnElementType(CSharpTokens.NEW_KEYWORD);
          }
        case 274: break;
        case 59: 
          { return returnElementType(CSharpTokens.XOREQ);
          }
        case 275: break;
        case 58: 
          { return returnElementType(CSharpTokens.ANDAND);
          }
        case 276: break;
        case 92: 
          { return returnElementType(CSharpTokens.BOOL_KEYWORD);
          }
        case 277: break;
        case 95: 
          { return returnElementType(CSharpTokens.SBYTE_KEYWORD);
          }
        case 278: break;
        case 62: 
          { return returnElementType(CSharpTokens.LTEQ);
          }
        case 279: break;
        case 138: 
          { return returnElementType(CSharpTokens.OPERATOR_KEYWORD);
          }
        case 280: break;
        case 2: 
          { return returnElementType(CSharpTokens.INTEGER_LITERAL);
          }
        case 281: break;
        case 143: 
          { return returnElementType(CSharpTokens.__REFTYPE_KEYWORD);
          }
        case 282: break;
        case 52: 
          { return returnElementType(CSharpTokens.EQEQ);
          }
        case 283: break;
        case 25: 
          { return returnElementType(CSharpTokens.LT);
          }
        case 284: break;
        case 19: 
          { return returnElementType(CSharpTokens.EQ);
          }
        case 285: break;
        case 104: 
          { return returnElementType(CSharpTokens.BREAK_KEYWORD);
          }
        case 286: break;
        case 14: 
          { return returnElementType(CSharpTokens.RBRACE);
          }
        case 287: break;
        case 69: 
          { return CSharpTokensImpl.LINE_DOC_COMMENT;
          }
        case 288: break;
        case 112: 
          { return returnElementType(CSharpTokens.STRING_KEYWORD);
          }
        case 289: break;
        case 1: 
          { return returnElementType(CSharpTokens.BAD_CHARACTER);
          }
        case 290: break;
        case 20: 
          { return returnElementType(CSharpTokens.PERC);
          }
        case 291: break;
        case 139: 
          { return returnElementType(CSharpTokens.OVERRIDE_KEYWORD);
          }
        case 292: break;
        case 74: 
          { return returnElementType(CSharpTokens.TRY_KEYWORD);
          }
        case 293: break;
        case 3: 
          { return returnElementType(CSharpTokens.DIV);
          }
        case 294: break;
        case 29: 
          { return returnElementType(CSharpTokens.TILDE);
          }
        case 295: break;
        case 125: 
          { return returnElementType(CSharpTokens.FOREACH_KEYWORD);
          }
        case 296: break;
        case 150: 
          { return returnElementType(CSharpTokens.STACKALLOC_KEYWORD);
          }
        case 297: break;
        case 66: 
          { return returnElementType(CSharpTokens.NULLABE_CALL);
          }
        case 298: break;
        case 16: 
          { return returnElementType(CSharpTokens.RBRACKET);
          }
        case 299: break;
        case 68: 
          { return returnElementType(CSharpTokens.ULONG_LITERAL);
          }
        case 300: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
