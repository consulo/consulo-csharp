/* The following code was generated by JFlex 1.4.4 on 20.03.15 20:13 */

package org.mustbe.consulo.csharp.lang.lexer;

import org.mustbe.consulo.csharp.lang.psi.CSharpTemplateTokens;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokens;
import org.mustbe.consulo.csharp.lang.psi.CSharpTokensImpl;
import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 20.03.15 20:13 from the specification file
 * <tt>F:/consulo-csharp/csharp-psi-impl/src/org/mustbe/consulo/csharp/lang/lexer/_CSharpLexer.flex</tt>
 */
public class _CSharpLexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MACRO = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\2\1\4\1\0\1\2\1\33\16\14\4\0\1\2\1\107"+
    "\1\10\1\34\1\12\1\75\1\77\1\6\1\72\1\73\1\5\1\76"+
    "\1\110\1\31\1\27\1\3\1\21\11\1\1\104\1\105\1\102\1\74"+
    "\1\103\1\111\1\11\1\16\1\23\1\16\1\25\1\30\1\24\5\13"+
    "\1\17\1\26\2\13\1\32\4\13\1\20\2\13\1\22\2\13\1\70"+
    "\1\7\1\71\1\100\1\15\1\0\1\35\1\57\1\60\1\56\1\46"+
    "\1\47\1\37\1\61\1\41\1\62\1\45\1\40\1\44\1\54\1\55"+
    "\1\51\1\13\1\36\1\42\1\43\1\53\1\52\1\64\1\63\1\50"+
    "\1\65\1\66\1\101\1\67\1\106\41\14\2\0\4\13\4\0\1\13"+
    "\2\0\1\14\7\0\1\13\4\0\1\13\5\0\27\13\1\0\37\13"+
    "\1\0\u013f\13\31\0\162\13\4\0\14\13\16\0\5\13\11\0\1\13"+
    "\21\0\130\14\5\0\23\14\12\0\1\13\13\0\1\13\1\0\3\13"+
    "\1\0\1\13\1\0\24\13\1\0\54\13\1\0\46\13\1\0\5\13"+
    "\4\0\202\13\1\0\4\14\3\0\105\13\1\0\46\13\2\0\2\13"+
    "\6\0\20\13\41\0\46\13\2\0\1\13\7\0\47\13\11\0\21\14"+
    "\1\0\27\14\1\0\3\14\1\0\1\14\1\0\2\14\1\0\1\14"+
    "\13\0\33\13\5\0\3\13\15\0\4\14\14\0\6\14\13\0\32\13"+
    "\5\0\13\13\16\14\7\0\12\14\4\0\2\13\1\14\143\13\1\0"+
    "\1\13\10\14\1\0\6\14\2\13\2\14\1\0\4\14\2\13\12\14"+
    "\3\13\2\0\1\13\17\0\1\14\1\13\1\14\36\13\33\14\2\0"+
    "\3\13\60\0\46\13\13\14\1\13\u014f\0\3\14\66\13\2\0\1\14"+
    "\1\13\20\14\2\0\1\13\4\14\3\0\12\13\2\14\2\0\12\14"+
    "\21\0\3\14\1\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\1\13\3\0\4\13\2\0\1\14\1\13\7\14\2\0\2\14"+
    "\2\0\3\14\11\0\1\14\4\0\2\13\1\0\3\13\2\14\2\0"+
    "\12\14\4\13\15\0\3\14\1\0\6\13\4\0\2\13\2\0\26\13"+
    "\1\0\7\13\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\14"+
    "\1\0\5\14\4\0\2\14\2\0\3\14\13\0\4\13\1\0\1\13"+
    "\7\0\14\14\3\13\14\0\3\14\1\0\11\13\1\0\3\13\1\0"+
    "\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\14\1\13"+
    "\10\14\1\0\3\14\1\0\3\14\2\0\1\13\17\0\2\13\2\14"+
    "\2\0\12\14\1\0\1\13\17\0\3\14\1\0\10\13\2\0\2\13"+
    "\2\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\14"+
    "\1\13\6\14\3\0\2\14\2\0\3\14\10\0\2\14\4\0\2\13"+
    "\1\0\3\13\4\0\12\14\1\0\1\13\20\0\1\14\1\13\1\0"+
    "\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0"+
    "\2\13\3\0\2\13\3\0\3\13\3\0\10\13\1\0\3\13\4\0"+
    "\5\14\3\0\3\14\1\0\4\14\11\0\1\14\17\0\11\14\11\0"+
    "\1\13\7\0\3\14\1\0\10\13\1\0\3\13\1\0\27\13\1\0"+
    "\12\13\1\0\5\13\4\0\7\14\1\0\3\14\1\0\4\14\7\0"+
    "\2\14\11\0\2\13\4\0\12\14\22\0\2\14\1\0\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\12\13\1\0\5\13\2\0\1\14\1\13"+
    "\7\14\1\0\3\14\1\0\4\14\7\0\2\14\7\0\1\13\1\0"+
    "\2\13\4\0\12\14\22\0\2\14\1\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\20\13\4\0\6\14\2\0\3\14\1\0\4\14\11\0"+
    "\1\14\10\0\2\13\4\0\12\14\22\0\2\14\1\0\22\13\3\0"+
    "\30\13\1\0\11\13\1\0\1\13\2\0\7\13\3\0\1\14\4\0"+
    "\6\14\1\0\1\14\1\0\10\14\22\0\2\14\15\0\60\13\1\14"+
    "\2\13\7\14\4\0\10\13\10\14\1\0\12\14\47\0\2\13\1\0"+
    "\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0"+
    "\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0"+
    "\4\13\1\14\2\13\6\14\1\0\2\14\1\13\2\0\5\13\1\0"+
    "\1\13\1\0\6\14\2\0\12\14\2\0\2\13\42\0\1\13\27\0"+
    "\2\14\6\0\12\14\13\0\1\14\1\0\1\14\1\0\1\14\4\0"+
    "\2\14\10\13\1\0\42\13\6\0\24\14\1\0\2\14\4\13\4\0"+
    "\10\14\1\0\44\14\11\0\1\14\71\0\42\13\1\0\5\13\1\0"+
    "\2\13\1\0\7\14\3\0\4\14\6\0\12\14\6\0\6\13\4\14"+
    "\106\0\46\13\12\0\51\13\7\0\132\13\5\0\104\13\5\0\122\13"+
    "\6\0\7\13\1\0\77\13\1\0\1\13\1\0\4\13\2\0\7\13"+
    "\1\0\1\13\1\0\4\13\2\0\47\13\1\0\1\13\1\0\4\13"+
    "\2\0\37\13\1\0\1\13\1\0\4\13\2\0\7\13\1\0\1\13"+
    "\1\0\4\13\2\0\7\13\1\0\7\13\1\0\27\13\1\0\37\13"+
    "\1\0\1\13\1\0\4\13\2\0\7\13\1\0\47\13\1\0\23\13"+
    "\16\0\11\14\56\0\125\13\14\0\u026c\13\2\0\10\13\12\0\32\13"+
    "\5\0\113\13\3\0\3\13\17\0\15\13\1\0\4\13\3\14\13\0"+
    "\22\13\3\14\13\0\22\13\2\14\14\0\15\13\1\0\3\13\1\0"+
    "\2\14\14\0\64\13\40\14\3\0\1\13\3\0\2\13\1\14\2\0"+
    "\12\14\41\0\3\14\2\0\12\14\6\0\130\13\10\0\51\13\1\14"+
    "\126\0\35\13\3\0\14\14\4\0\14\14\12\0\12\14\36\13\2\0"+
    "\5\13\u038b\0\154\13\224\0\234\13\4\0\132\13\6\0\26\13\2\0"+
    "\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0\7\13\1\0"+
    "\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13\4\0"+
    "\15\13\5\0\3\13\1\0\7\13\17\0\4\14\32\0\5\14\20\0"+
    "\2\13\23\0\1\13\13\0\4\14\6\0\6\14\1\0\1\13\15\0"+
    "\1\13\40\0\22\13\36\0\15\14\4\0\1\14\3\0\6\14\27\0"+
    "\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\4\13\1\0\3\13\1\0"+
    "\7\13\3\0\3\13\5\0\5\13\26\0\44\13\u0e81\0\3\13\31\0"+
    "\11\13\6\14\1\0\5\13\2\0\5\13\4\0\126\13\2\0\2\14"+
    "\2\0\3\13\1\0\137\13\5\0\50\13\4\0\136\13\21\0\30\13"+
    "\70\0\20\13\u0200\0\u19b6\13\112\0\u51a6\13\132\0\u048d\13\u0773\0\u2ba4\13"+
    "\u215c\0\u012e\13\2\0\73\13\225\0\7\13\14\0\5\13\5\0\1\13"+
    "\1\14\12\13\1\0\15\13\1\0\5\13\1\0\1\13\1\0\2\13"+
    "\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0\66\13"+
    "\50\0\15\13\3\0\20\14\20\0\4\14\17\0\2\13\30\0\3\13"+
    "\31\0\1\13\6\0\5\13\1\0\207\13\2\0\1\14\4\0\1\13"+
    "\13\0\12\14\7\0\32\13\4\0\1\13\1\0\32\13\12\0\132\13"+
    "\3\0\6\13\2\0\6\13\2\0\6\13\2\0\3\13\3\0\2\13"+
    "\3\0\2\13\22\0\3\14\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\3\10\1\2\1\11\1\12\1\3\1\13\22\10"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\2\41\1\42\1\43"+
    "\1\44\1\45\1\46\2\45\1\3\1\47\1\50\1\51"+
    "\1\52\2\6\2\7\2\0\1\10\2\2\1\53\1\54"+
    "\1\55\1\56\4\10\1\57\1\10\1\60\1\61\43\10"+
    "\1\62\11\10\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\0\1\76\1\0"+
    "\1\77\1\100\1\101\1\102\1\103\1\45\1\47\1\104"+
    "\1\0\1\105\1\106\3\10\1\2\1\0\3\10\1\107"+
    "\4\10\1\110\7\10\1\111\15\10\1\112\16\10\1\113"+
    "\3\10\1\114\21\10\1\115\1\116\1\50\3\10\1\0"+
    "\3\10\1\117\1\120\1\121\13\10\1\122\2\10\1\123"+
    "\1\124\1\10\1\125\14\10\1\126\1\10\1\127\5\10"+
    "\1\130\10\10\1\131\1\10\1\132\1\133\1\134\4\10"+
    "\1\135\20\10\1\136\1\137\2\10\1\140\1\141\2\10"+
    "\1\142\1\10\1\143\7\10\1\144\1\145\14\10\1\146"+
    "\1\147\1\150\1\151\2\10\1\152\6\10\1\153\3\10"+
    "\1\154\1\155\1\10\1\156\1\157\1\160\1\161\1\162"+
    "\1\163\3\10\1\164\2\10\1\165\2\10\1\166\1\167"+
    "\4\10\1\170\4\10\1\171\15\10\1\172\1\173\1\174"+
    "\1\10\1\175\6\10\1\176\1\177\1\200\1\10\1\201"+
    "\4\10\1\202\1\203\1\204\1\10\1\205\1\10\1\206"+
    "\1\10\1\207\2\10\1\210\1\211\1\212\1\213\1\214"+
    "\1\215\1\10\1\216\1\217\1\10\1\220\1\221\1\222"+
    "\1\223\1\224";

  private static int [] zzUnpackAction() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456"+
    "\0\u04a0\0\224\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac"+
    "\0\u08f6\0\u0940\0\u098a\0\u09d4\0\224\0\224\0\224\0\224"+
    "\0\224\0\224\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90"+
    "\0\u0bda\0\u0c24\0\u0c6e\0\224\0\224\0\u0cb8\0\224\0\u0d02"+
    "\0\224\0\u0d4c\0\224\0\u0d96\0\u0de0\0\u0e2a\0\224\0\224"+
    "\0\224\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\224\0\224"+
    "\0\224\0\u0fe6\0\u1030\0\224\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\224\0\224\0\224\0\u032e\0\u11ec\0\u1236\0\u1280"+
    "\0\u12ca\0\u032e\0\u1314\0\u032e\0\u135e\0\u13a8\0\u13f2\0\u143c"+
    "\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c"+
    "\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc"+
    "\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c"+
    "\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c"+
    "\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc"+
    "\0\u2016\0\u2060\0\224\0\224\0\224\0\224\0\224\0\224"+
    "\0\224\0\224\0\224\0\224\0\224\0\u20aa\0\224\0\u20f4"+
    "\0\224\0\224\0\224\0\224\0\224\0\u213e\0\u2188\0\u21d2"+
    "\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422"+
    "\0\u246c\0\u24b6\0\u2500\0\u032e\0\u254a\0\u2594\0\u25de\0\u2628"+
    "\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878"+
    "\0\u032e\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e"+
    "\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce"+
    "\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e"+
    "\0\u2f68\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u032e\0\u30da\0\u3124"+
    "\0\u316e\0\u032e\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a"+
    "\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a"+
    "\0\u35c4\0\u360e\0\u3658\0\224\0\224\0\224\0\u36a2\0\u36ec"+
    "\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u032e\0\u032e\0\u032e"+
    "\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae"+
    "\0\u3af8\0\u3b42\0\u3b8c\0\u032e\0\u3bd6\0\u3c20\0\u032e\0\u032e"+
    "\0\u3c6a\0\u032e\0\u3cb4\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc\0\u3e26"+
    "\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98\0\u3fe2\0\u032e\0\u402c"+
    "\0\u032e\0\u4076\0\u40c0\0\u410a\0\u4154\0\u419e\0\u032e\0\u41e8"+
    "\0\u4232\0\u427c\0\u42c6\0\u4310\0\u435a\0\u43a4\0\u43ee\0\u032e"+
    "\0\u4438\0\u032e\0\u032e\0\u032e\0\u4482\0\u44cc\0\u4516\0\u4560"+
    "\0\u032e\0\u45aa\0\u45f4\0\u463e\0\u4688\0\u46d2\0\u471c\0\u4766"+
    "\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u4922\0\u496c\0\u49b6"+
    "\0\u4a00\0\u032e\0\u032e\0\u4a4a\0\u4a94\0\u032e\0\u032e\0\u4ade"+
    "\0\u4b28\0\u032e\0\u4b72\0\u032e\0\u4bbc\0\u4c06\0\u4c50\0\u4c9a"+
    "\0\u4ce4\0\u4d2e\0\u4d78\0\u032e\0\u032e\0\u4dc2\0\u4e0c\0\u4e56"+
    "\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u505c\0\u50a6"+
    "\0\u50f0\0\u032e\0\u032e\0\u032e\0\u032e\0\u513a\0\u5184\0\u032e"+
    "\0\u51ce\0\u5218\0\u5262\0\u52ac\0\u52f6\0\u5340\0\u032e\0\u538a"+
    "\0\u53d4\0\u541e\0\u032e\0\u032e\0\u5468\0\u032e\0\u032e\0\u032e"+
    "\0\u032e\0\u032e\0\u032e\0\u54b2\0\u54fc\0\u5546\0\u032e\0\u5590"+
    "\0\u55da\0\u032e\0\u5624\0\u566e\0\u032e\0\u032e\0\u56b8\0\u5702"+
    "\0\u574c\0\u5796\0\u032e\0\u57e0\0\u582a\0\u5874\0\u58be\0\u032e"+
    "\0\u5908\0\u5952\0\u599c\0\u59e6\0\u5a30\0\u5a7a\0\u5ac4\0\u5b0e"+
    "\0\u5b58\0\u5ba2\0\u5bec\0\u5c36\0\u5c80\0\u032e\0\u032e\0\u032e"+
    "\0\u5cca\0\u032e\0\u5d14\0\u5d5e\0\u5da8\0\u5df2\0\u5e3c\0\u5e86"+
    "\0\u032e\0\u032e\0\u032e\0\u5ed0\0\u032e\0\u5f1a\0\u5f64\0\u5fae"+
    "\0\u5ff8\0\u032e\0\u032e\0\u032e\0\u6042\0\u032e\0\u608c\0\u032e"+
    "\0\u60d6\0\u032e\0\u6120\0\u616a\0\u032e\0\u032e\0\u032e\0\u032e"+
    "\0\u032e\0\u032e\0\u61b4\0\u032e\0\u032e\0\u61fe\0\u032e\0\u032e"+
    "\0\u032e\0\u032e\0\u032e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\3\14\1\16"+
    "\5\14\1\17\1\14\1\20\1\14\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\14\1\32"+
    "\1\33\1\14\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\3\14\1\44\1\14\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\2\71\1\72\1\71\1\73\26\71\1\74\56\71"+
    "\113\0\1\4\13\0\1\4\1\0\1\75\1\76\1\4"+
    "\2\0\1\77\1\100\1\101\1\102\1\103\7\0\1\75"+
    "\3\0\1\101\1\0\1\103\1\77\3\0\1\76\2\0"+
    "\1\100\35\0\1\5\1\0\1\104\26\0\1\104\1\22"+
    "\60\0\1\105\1\0\1\106\66\0\1\107\111\0\1\110"+
    "\15\0\4\10\1\0\1\10\1\111\1\112\23\10\1\0"+
    "\56\10\4\11\1\0\2\11\1\113\1\114\22\11\1\0"+
    "\56\11\10\0\1\115\1\0\2\14\1\0\4\14\1\0"+
    "\5\14\1\0\1\14\1\0\1\14\2\0\31\14\25\0"+
    "\1\14\6\0\1\116\1\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\31\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\31\14\25\0\1\14\10\0"+
    "\3\14\1\117\11\14\1\0\1\14\1\0\1\14\2\0"+
    "\31\14\25\0\1\4\13\0\1\4\1\0\1\75\1\76"+
    "\1\4\1\120\1\121\1\77\1\100\1\101\1\102\1\103"+
    "\7\0\1\75\3\0\1\101\1\0\1\103\1\77\3\0"+
    "\1\76\2\0\1\100\1\121\3\0\1\120\27\0\1\102"+
    "\17\0\1\102\121\0\1\122\42\0\1\123\6\0\1\124"+
    "\10\0\1\5\1\0\1\5\26\0\1\104\1\22\56\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\5\14\1\125\14\14\1\126\6\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\11\14\1\127"+
    "\17\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\20\14\1\130\10\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\20\14\1\131"+
    "\10\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\5\14\1\132\1\14\1\133\2\14\1\134"+
    "\4\14\1\135\11\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\4\14\1\136\1\14\1\137"+
    "\2\14\1\140\10\14\1\141\1\14\1\142\2\14\1\143"+
    "\1\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\1\14\1\144\11\14\1\145\10\14\1\146"+
    "\4\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\3\14\1\147\11\14\1\150\1\14\1\151"+
    "\6\14\1\152\2\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\153\2\14\1\154\1\155"+
    "\13\14\1\156\10\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\157\1\160\14\14\1\161"+
    "\12\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\4\14\1\162\13\14\1\163\10\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\3\14\1\164\1\165\1\166\11\14\1\167\11\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\1\170\10\14\1\171\4\14\1\172\12\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\14\14"+
    "\1\173\1\174\1\175\3\14\1\176\6\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\11\14"+
    "\1\177\1\14\1\200\4\14\1\201\10\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\1\202"+
    "\1\203\11\14\1\204\4\14\1\205\10\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\1\206"+
    "\2\14\1\207\14\14\1\210\3\14\1\211\4\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\24\14\1\212\4\14\120\0\1\213\6\0\1\214\102\0"+
    "\1\215\111\0\1\216\1\0\1\217\107\0\1\220\2\0"+
    "\1\221\106\0\1\222\111\0\1\223\4\0\1\224\104\0"+
    "\1\225\5\0\1\226\103\0\1\227\6\0\1\230\112\0"+
    "\1\231\101\0\1\232\44\0\1\233\61\0\1\234\2\0"+
    "\1\72\113\0\1\73\125\0\1\235\32\0\1\235\55\0"+
    "\1\235\20\0\1\235\52\0\1\102\13\0\1\102\3\0"+
    "\1\102\2\0\1\77\1\100\1\101\1\0\1\103\13\0"+
    "\1\101\1\0\1\103\1\77\6\0\1\100\34\0\1\236"+
    "\13\0\1\236\3\0\1\236\2\0\1\77\1\100\1\101"+
    "\2\0\1\236\12\0\1\101\2\0\1\77\6\0\1\100"+
    "\17\0\1\236\15\0\1\104\1\0\1\104\26\0\1\104"+
    "\56\0\3\237\1\240\1\0\26\237\1\0\56\237\5\106"+
    "\1\241\104\106\4\10\1\0\26\10\1\0\56\10\4\11"+
    "\1\0\26\11\1\0\56\11\10\115\1\242\101\115\10\116"+
    "\1\243\101\116\1\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\244\1\245\5\14\1\246\21\14"+
    "\25\0\1\247\13\0\2\247\1\75\1\76\1\247\1\0"+
    "\3\247\1\0\1\250\1\247\4\0\1\247\2\0\1\75"+
    "\5\0\2\247\3\0\1\76\2\0\3\247\32\0\1\121"+
    "\13\0\1\121\1\0\1\75\1\76\1\121\16\0\1\75"+
    "\12\0\1\76\37\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\5\14\1\251\23\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\1\252"+
    "\5\14\1\253\3\14\1\254\16\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\6\14\1\255"+
    "\22\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\17\14\1\256\3\14\1\257\5\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\14\14\1\260\14\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\6\14\1\261\22\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\30\14\1\262\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\263\1\264\27\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\1\265"+
    "\30\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\13\14\1\266\15\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\20\14\1\267"+
    "\10\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\4\14\1\270\24\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\13\14\1\271"+
    "\2\14\1\272\12\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\14\14\1\273\14\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\1\14\1\274\2\14\1\275\24\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\5\14\1\276"+
    "\23\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\11\14\1\277\17\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\16\14\1\300"+
    "\12\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\6\14\1\301\5\14\1\302\14\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\3\14\1\303\25\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\20\14\1\304\10\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\17\14\1\305\6\14\1\306\2\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\14\1\307"+
    "\27\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\1\14\1\310\27\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\4\14\1\311"+
    "\13\14\1\312\10\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\22\14\1\313\6\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\1\14\1\314\27\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\3\14\1\315\1\316\24\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\20\14\1\317\10\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\17\14\1\320\11\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\4\14\1\321\17\14\1\322\4\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\5\14"+
    "\1\323\15\14\1\324\5\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\7\14\1\325\21\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\27\14\1\326\1\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\3\14\1\327\25\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\11\14\1\330\17\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\11\14\1\331\17\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\6\14\1\332\22\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\25\14\1\333\3\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\3\14\1\334\6\14\1\335\10\14\1\336\5\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\17\14\1\337\11\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\16\14\1\340\12\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\5\14\1\341\23\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\11\14\1\342\17\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\6\14\1\343\22\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\20\14\1\344\10\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\5\14\1\345\1\346\22\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\347\30\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\17\14\1\350\11\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\1\351\10\14\1\352"+
    "\17\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\4\14\1\353\24\14\120\0\1\354\111\0"+
    "\1\355\16\0\1\236\13\0\1\236\3\0\1\236\2\0"+
    "\1\77\1\100\1\101\15\0\1\101\2\0\1\77\6\0"+
    "\1\100\33\0\4\237\1\0\26\237\1\0\56\237\4\240"+
    "\1\0\26\240\1\0\56\240\3\106\1\356\1\106\1\241"+
    "\104\106\10\0\1\115\111\0\1\116\102\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\14\1\357"+
    "\27\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\11\14\1\360\17\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\361\30\14"+
    "\25\0\1\247\13\0\2\247\1\75\1\76\1\247\1\0"+
    "\3\247\1\0\1\362\1\247\1\0\1\103\2\0\1\247"+
    "\2\0\1\75\5\0\2\247\1\0\1\103\1\0\1\76"+
    "\2\0\3\247\32\0\1\362\13\0\2\362\2\0\1\362"+
    "\1\0\3\362\2\0\1\362\4\0\1\362\10\0\2\362"+
    "\6\0\3\362\32\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\6\14\1\363\22\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\21\14"+
    "\1\364\7\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\16\14\1\365\12\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\20\14"+
    "\1\366\10\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\2\14\1\367\26\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\10\14"+
    "\1\370\20\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\3\14\1\371\25\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\11\14"+
    "\1\372\17\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\11\14\1\373\17\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\6\14"+
    "\1\374\14\14\1\375\5\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\4\14\1\376\11\14"+
    "\1\377\12\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\3\14\1\u0100\25\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\6\14"+
    "\1\u0101\22\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\14\1\u0102\27\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\6\14"+
    "\1\u0103\22\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\11\14\1\u0104\17\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\11\14"+
    "\1\u0105\17\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\20\14\1\u0106\10\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\5\14"+
    "\1\u0107\23\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\11\14\1\u0108\17\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\17\14"+
    "\1\u0109\11\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\7\14\1\u010a\21\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\11\14"+
    "\1\u010b\17\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\3\14\1\u010c\25\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\5\14"+
    "\1\272\23\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\u010d\30\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\u010e\30\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\11\14\1\u010f\17\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\11\14\1\u0110\17\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\1\u0111\30\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\15\14\1\u0112\13\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\6\14\1\u0113\22\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\3\14\1\u0114\25\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\6\14\1\u0115\22\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\u0116\30\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\21\14"+
    "\1\u0117\7\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\17\14\1\u0118\11\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\6\14"+
    "\1\u0119\22\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\17\14\1\u011a\11\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\20\14"+
    "\1\u011b\10\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\u011c\30\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\24\14\1\u011d"+
    "\4\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\11\14\1\u011e\17\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\3\14\1\u011f"+
    "\25\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\1\14\1\u0120\27\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\14\1\u0121"+
    "\27\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\11\14\1\u0122\17\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\11\14\1\u0123"+
    "\17\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\1\u0124\30\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\4\14\1\u0125\24\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\1\u0126\30\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\22\14\1\u0127\6\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\11\14\1\u0128\17\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\u0129\30\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\11\14"+
    "\1\u012a\17\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\3\14\1\u012b\25\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\11\14"+
    "\1\u012c\17\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\23\14\1\u012d\5\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\5\14"+
    "\1\u012e\23\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\5\14\1\u012f\1\u0130\22\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\1\14\1\u0131\27\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\23\14\1\u0132\5\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\3\14\1\u0133\25\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\2\14\1\u0134\26\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\12\14\1\u0135\16\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\10\14\1\u0136\20\14\25\0"+
    "\1\362\13\0\2\362\2\0\1\362\1\0\3\362\2\0"+
    "\1\362\1\0\1\103\2\0\1\362\10\0\2\362\1\0"+
    "\1\103\4\0\3\362\32\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\14\1\u0137\27\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\20\14\1\u0138\10\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\14\1\u0139\27\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\4\14\1\u013a\24\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\14\1\u013b\27\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\20\14\1\u013c\10\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\4\14\1\u013d\24\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\10\14\1\u013e\20\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\17\14\1\u013f\11\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\23\14\1\u0140\5\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u0141\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\11\14\1\u0142\17\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\6\14\1\u0143\22\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\23\14\1\u0144\5\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\20\14\1\u0145\10\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\27\14\1\u0146\1\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\6\14\1\u0147\22\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\1\14\1\u0148\27\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\4\14\1\u0149\24\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\6\14\1\u014a\22\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\3\14\1\u014b\25\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\21\14\1\u014c\7\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\u014d\30\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\7\14"+
    "\1\u014e\21\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\u014f\30\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\11\14\1\u0150"+
    "\17\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\4\14\1\u0151\24\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\16\14\1\u0152"+
    "\12\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\6\14\1\u0153\22\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\2\14\1\u0154"+
    "\26\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\2\14\1\u0155\26\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\14\1\u0156"+
    "\27\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\12\14\1\u0157\16\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\11\14\1\u0158"+
    "\17\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\5\14\1\u0159\23\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\u015a\30\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\1\14\1\u015b\27\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\23\14\1\u015c\5\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\2\14\1\u015d\26\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\16\14\1\u015e\12\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\7\14\1\u015f\21\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\7\14\1\u0160\21\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\3\14\1\u0161\25\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\10\14\1\u0162\20\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\24\14\1\u0163\4\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\5\14\1\u0164\23\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\6\14\1\u0165\22\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\4\14\1\u0166\24\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\10\14\1\u0167\20\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\11\14\1\u0168\17\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\3\14\1\u0169\25\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\6\14\1\u016a\6\14"+
    "\1\u016b\13\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\11\14\1\u016c\17\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\1\u016d"+
    "\30\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\17\14\1\u016e\11\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\17\14\1\u016f"+
    "\11\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\23\14\1\u0170\5\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\12\14\1\u0171"+
    "\4\14\1\u0172\11\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\12\14\1\u0173\16\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\23\14\1\u0174\5\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\u0175\30\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\2\14"+
    "\1\u0176\26\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\6\14\1\u0177\22\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\21\14"+
    "\1\u0178\7\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\24\14\1\u0179\4\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\12\14"+
    "\1\u017a\16\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\17\14\1\u017b\11\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\23\14"+
    "\1\u017c\5\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\3\14\1\u017d\25\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\23\14"+
    "\1\u017e\5\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\5\14\1\u017f\23\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\6\14"+
    "\1\u0180\22\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\23\14\1\u0181\5\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\23\14"+
    "\1\u0182\5\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\u0183\30\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\4\14\1\u0184"+
    "\24\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\6\14\1\u0185\22\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\11\14\1\u0186"+
    "\17\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\23\14\1\u0187\5\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\14\14\1\u0188"+
    "\14\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\6\14\1\u0189\22\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\4\14\1\u018a"+
    "\24\14\25\0\1\14\10\0\15\14\1\0\1\14\1\0"+
    "\1\14\2\0\6\14\1\u018b\22\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\u018c\30\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\3\14\1\u018d\25\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\1\u018e\30\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\4\14\1\u018f\24\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u0190\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\17\14\1\u0191\11\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u0192\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\4\14\1\u0193\24\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\13\14\1\u0194\15\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\1\u0195\30\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\14\1\u0196\27\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\23\14"+
    "\1\u0197\5\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\3\14\1\u0198\25\14\25\0\1\14"+
    "\10\0\15\14\1\0\1\14\1\0\1\14\2\0\4\14"+
    "\1\u0199\24\14\25\0\1\14\10\0\15\14\1\0\1\14"+
    "\1\0\1\14\2\0\1\u019a\30\14\25\0\1\14\10\0"+
    "\15\14\1\0\1\14\1\0\1\14\2\0\1\u019b\30\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\3\14\1\u019c\25\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\4\14\1\u019d\24\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\13\14\1\u019e\15\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\24\14\1\u019f\4\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\11\14\1\u01a0\17\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\6\14\1\u01a1\22\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\3\14\1\u01a2\25\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\3\14\1\u01a3\25\14"+
    "\25\0\1\14\10\0\15\14\1\0\1\14\1\0\1\14"+
    "\2\0\10\14\1\u01a4\20\14\25\0\1\14\10\0\15\14"+
    "\1\0\1\14\1\0\1\14\2\0\1\u01a5\30\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\20\14\1\u01a6\10\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\21\14\1\u01a7\7\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\6\14\1\u01a8\22\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\6\14\1\u01a9\22\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\3\14\1\u01aa\25\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\23\14\1\u01ab\5\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\16\14\1\u01ac\12\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\21\14\1\u01ad\7\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\5\14\1\u01ae\23\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\14\14\1\u01af\14\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\3\14\1\u01b0\25\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u01b1\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\6\14\1\u01b2\22\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\13\14\1\u01b3\15\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\6\14\1\u01b4\22\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\23\14\1\u01b5\5\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\3\14\1\u01b6\25\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\3\14\1\u01b7\25\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\6\14\1\u01b8\22\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u01b9\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\11\14\1\u01ba\17\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u01bb\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\23\14\1\u01bc\5\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\1\14\1\u01bd\27\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\11\14\1\u01be\17\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u01bf\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\11\14\1\u01c0\17\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\6\14\1\u01c1\22\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\11\14\1\u01c2\17\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\16\14\1\u01c3\12\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\12\14\1\u01c4\16\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u01c5\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\20\14\1\u01c6\10\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\21\14\1\u01c7\7\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\21\14\1\u01c8\7\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\11\14\1\u01c9\17\14\25\0"+
    "\1\14\10\0\15\14\1\0\1\14\1\0\1\14\2\0"+
    "\11\14\1\u01ca\17\14\25\0\1\14\10\0\15\14\1\0"+
    "\1\14\1\0\1\14\2\0\23\14\1\u01cb\5\14\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\16\1\1\11\22\1\6\11\11\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\3\1\3\11"+
    "\5\1\3\11\2\1\1\11\2\0\3\1\3\11\66\1"+
    "\13\11\1\0\1\11\1\0\5\11\3\1\1\0\6\1"+
    "\1\0\103\1\3\11\3\1\1\0\331\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1790) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   private void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return CSharpTokens.MULEQ;
          }
        case 149: break;
        case 83: 
          { return CSharpTokens.THIS_KEYWORD;
          }
        case 150: break;
        case 29: 
          { return CSharpTokens.EXCL;
          }
        case 151: break;
        case 3: 
          { return CSharpTokens.WHITE_SPACE;
          }
        case 152: break;
        case 91: 
          { return CSharpTokens.BOOL_KEYWORD;
          }
        case 153: break;
        case 11: 
          { yypushback(yylength());
		yybegin(MACRO);
          }
        case 154: break;
        case 69: 
          { return CSharpTokens.VERBATIM_STRING_LITERAL;
          }
        case 155: break;
        case 72: 
          { return CSharpTokens.INT_KEYWORD;
          }
        case 156: break;
        case 51: 
          { return CSharpTokens.EQEQ;
          }
        case 157: break;
        case 67: 
          { return CSharpTokens.ULONG_LITERAL;
          }
        case 158: break;
        case 144: 
          { return CSharpTokens.PROTECTED_KEYWORD;
          }
        case 159: break;
        case 55: 
          { return CSharpTokens.PLUSPLUS;
          }
        case 160: break;
        case 110: 
          { return CSharpTokens.STRING_KEYWORD;
          }
        case 161: break;
        case 137: 
          { return CSharpTokens.OVERRIDE_KEYWORD;
          }
        case 162: break;
        case 117: 
          { return CSharpTokens.PUBLIC_KEYWORD;
          }
        case 163: break;
        case 115: 
          { return CSharpTokens.EXTERN_KEYWORD;
          }
        case 164: break;
        case 129: 
          { return CSharpTokens.CHECKED_KEYWORD;
          }
        case 165: break;
        case 18: 
          { return CSharpTokens.EQ;
          }
        case 166: break;
        case 81: 
          { return CSharpTokens.LOCK_KEYWORD;
          }
        case 167: break;
        case 93: 
          { return CSharpTokens.CHAR_KEYWORD;
          }
        case 168: break;
        case 89: 
          { return CSharpTokens.BASE_KEYWORD;
          }
        case 169: break;
        case 56: 
          { return CSharpTokens.ANDEQ;
          }
        case 170: break;
        case 17: 
          { return CSharpTokens.RPAR;
          }
        case 171: break;
        case 31: 
          { return CSharpTokens.QUEST;
          }
        case 172: break;
        case 57: 
          { return CSharpTokens.ANDAND;
          }
        case 173: break;
        case 85: 
          { return CSharpTokens.ENUM_KEYWORD;
          }
        case 174: break;
        case 62: 
          { return CSharpTokens.GTEQ;
          }
        case 175: break;
        case 87: 
          { return CSharpTokens.UINT_KEYWORD;
          }
        case 176: break;
        case 148: 
          { return CSharpTokens.STACKALLOC_KEYWORD;
          }
        case 177: break;
        case 47: 
          { return CSharpTokens.IS_KEYWORD;
          }
        case 178: break;
        case 66: 
          { return CSharpTokens.QUESTQUEST;
          }
        case 179: break;
        case 134: 
          { return CSharpTokens.EXPLICIT_KEYWORD;
          }
        case 180: break;
        case 64: 
          { return CSharpTokens.NTEQ;
          }
        case 181: break;
        case 123: 
          { return CSharpTokens.FOREACH_KEYWORD;
          }
        case 182: break;
        case 101: 
          { return CSharpTokens.USING_KEYWORD;
          }
        case 183: break;
        case 34: 
          { return CSharpTokens.LONG_LITERAL;
          }
        case 184: break;
        case 135: 
          { return CSharpTokens.VOLATILE_KEYWORD;
          }
        case 185: break;
        case 2: 
          { return CSharpTokens.INTEGER_LITERAL;
          }
        case 186: break;
        case 108: 
          { return CSharpTokens.SIZEOF_KEYWORD;
          }
        case 187: break;
        case 73: 
          { return CSharpTokens.TRY_KEYWORD;
          }
        case 188: break;
        case 41: 
          { return CSharpTokens.DIVEQ;
          }
        case 189: break;
        case 13: 
          { return CSharpTokens.RBRACE;
          }
        case 190: break;
        case 35: 
          { return CSharpTokens.UINTEGER_LITERAL;
          }
        case 191: break;
        case 143: 
          { return CSharpTokens.INTERFACE_KEYWORD;
          }
        case 192: break;
        case 118: 
          { return CSharpTokens.USHORT_KEYWORD;
          }
        case 193: break;
        case 26: 
          { return CSharpTokens.COLON;
          }
        case 194: break;
        case 33: 
          { yybegin(YYINITIAL); return CSharpTemplateTokens.MACRO_FRAGMENT;
          }
        case 195: break;
        case 111: 
          { return CSharpTokens.STRUCT_KEYWORD;
          }
        case 196: break;
        case 113: 
          { return CSharpTokens.SWITCH_KEYWORD;
          }
        case 197: break;
        case 4: 
          { return CSharpTokens.DIV;
          }
        case 198: break;
        case 60: 
          { return CSharpTokens.OROR;
          }
        case 199: break;
        case 24: 
          { return CSharpTokens.LT;
          }
        case 200: break;
        case 79: 
          { return CSharpTokens.GOTO_KEYWORD;
          }
        case 201: break;
        case 98: 
          { return CSharpTokens.FLOAT_KEYWORD;
          }
        case 202: break;
        case 78: 
          { return CSharpTokens.GTGTEQ;
          }
        case 203: break;
        case 12: 
          { return CSharpTokens.LBRACE;
          }
        case 204: break;
        case 37: 
          { return CSharpTokens.DOUBLE_LITERAL;
          }
        case 205: break;
        case 139: 
          { return CSharpTokens.CONTINUE_KEYWORD;
          }
        case 206: break;
        case 106: 
          { return CSharpTokens.WHILE_KEYWORD;
          }
        case 207: break;
        case 114: 
          { return CSharpTokens.TYPEOF_KEYWORD;
          }
        case 208: break;
        case 140: 
          { return CSharpTokens.__ARGLIST_KEYWORD;
          }
        case 209: break;
        case 38: 
          { return CSharpTokens.DECIMAL_LITERAL;
          }
        case 210: break;
        case 138: 
          { return CSharpTokens.DELEGATE_KEYWORD;
          }
        case 211: break;
        case 9: 
          { return CSharpTokens.DOT;
          }
        case 212: break;
        case 142: 
          { return CSharpTokens.__MAKEREF_KEYWORD;
          }
        case 213: break;
        case 92: 
          { return CSharpTokens.CASE_KEYWORD;
          }
        case 214: break;
        case 52: 
          { return CSharpTokens.DARROW;
          }
        case 215: break;
        case 50: 
          { return CSharpTokens.DO_KEYWORD;
          }
        case 216: break;
        case 84: 
          { return CSharpTokens.ELSE_KEYWORD;
          }
        case 217: break;
        case 120: 
          { return CSharpTokens.OBJECT_KEYWORD;
          }
        case 218: break;
        case 126: 
          { return CSharpTokens.DEFAULT_KEYWORD;
          }
        case 219: break;
        case 100: 
          { return CSharpTokens.ULONG_KEYWORD;
          }
        case 220: break;
        case 59: 
          { return CSharpTokens.OREQ;
          }
        case 221: break;
        case 45: 
          { return CSharpTokens.ARROW;
          }
        case 222: break;
        case 147: 
          { return CSharpTokens.__REFVALUE_KEYWORD;
          }
        case 223: break;
        case 40: 
          { return CSharpTokens.BLOCK_COMMENT;
          }
        case 224: break;
        case 71: 
          { return CSharpTokens.REF_KEYWORD;
          }
        case 225: break;
        case 128: 
          { return CSharpTokens.DYNAMIC_KEYWORD;
          }
        case 226: break;
        case 119: 
          { return CSharpTokens.UNSAFE_KEYWORD;
          }
        case 227: break;
        case 80: 
          { return CSharpTokens.LONG_KEYWORD;
          }
        case 228: break;
        case 102: 
          { return CSharpTokens.BREAK_KEYWORD;
          }
        case 229: break;
        case 10: 
          { return CSharpTokens.MINUS;
          }
        case 230: break;
        case 53: 
          { return CSharpTokens.PERCEQ;
          }
        case 231: break;
        case 132: 
          { return CSharpTokens.IMPLICIT_KEYWORD;
          }
        case 232: break;
        case 109: 
          { return CSharpTokens.STATIC_KEYWORD;
          }
        case 233: break;
        case 30: 
          { return CSharpTokens.COMMA;
          }
        case 234: break;
        case 88: 
          { return CSharpTokens.NULL_LITERAL;
          }
        case 235: break;
        case 21: 
          { return CSharpTokens.AND;
          }
        case 236: break;
        case 20: 
          { return CSharpTokens.PLUS;
          }
        case 237: break;
        case 43: 
          { return CSharpTokens.MINUSMINUS;
          }
        case 238: break;
        case 46: 
          { return CSharpTokens.AS_KEYWORD;
          }
        case 239: break;
        case 75: 
          { return CSharpTokens.NEW_KEYWORD;
          }
        case 240: break;
        case 130: 
          { return CSharpTokens.ABSTRACT_KEYWORD;
          }
        case 241: break;
        case 39: 
          { return CSharpTokens.LINE_COMMENT;
          }
        case 242: break;
        case 103: 
          { return CSharpTokens.CATCH_KEYWORD;
          }
        case 243: break;
        case 96: 
          { return CSharpTokens.THROW_KEYWORD;
          }
        case 244: break;
        case 112: 
          { return CSharpTokens.SEALED_KEYWORD;
          }
        case 245: break;
        case 15: 
          { return CSharpTokens.RBRACKET;
          }
        case 246: break;
        case 6: 
          { return CSharpTokens.CHARACTER_LITERAL;
          }
        case 247: break;
        case 28: 
          { return CSharpTokens.TILDE;
          }
        case 248: break;
        case 74: 
          { return CSharpTokens.FOR_KEYWORD;
          }
        case 249: break;
        case 8: 
          { return CSharpTokens.IDENTIFIER;
          }
        case 250: break;
        case 107: 
          { return CSharpTokens.RETURN_KEYWORD;
          }
        case 251: break;
        case 14: 
          { return CSharpTokens.LBRACKET;
          }
        case 252: break;
        case 70: 
          { return CSharpTokensImpl.INTERPOLATION_STRING_LITERAL;
          }
        case 253: break;
        case 90: 
          { return CSharpTokens.BYTE_KEYWORD;
          }
        case 254: break;
        case 99: 
          { return CSharpTokens.FIXED_KEYWORD;
          }
        case 255: break;
        case 49: 
          { return CSharpTokens.IN_KEYWORD;
          }
        case 256: break;
        case 1: 
          { return CSharpTokens.BAD_CHARACTER;
          }
        case 257: break;
        case 82: 
          { return CSharpTokens.BOOL_LITERAL;
          }
        case 258: break;
        case 121: 
          { return CSharpTokens.DOUBLE_KEYWORD;
          }
        case 259: break;
        case 44: 
          { return CSharpTokens.MINUSEQ;
          }
        case 260: break;
        case 61: 
          { return CSharpTokens.LTEQ;
          }
        case 261: break;
        case 27: 
          { return CSharpTokens.SEMICOLON;
          }
        case 262: break;
        case 124: 
          { return CSharpTokens.PRIVATE_KEYWORD;
          }
        case 263: break;
        case 104: 
          { return CSharpTokens.CLASS_KEYWORD;
          }
        case 264: break;
        case 94: 
          { return CSharpTokens.SBYTE_KEYWORD;
          }
        case 265: break;
        case 127: 
          { return CSharpTokens.DECIMAL_KEYWORD;
          }
        case 266: break;
        case 7: 
          { return CSharpTokens.STRING_LITERAL;
          }
        case 267: break;
        case 63: 
          { return CSharpTokens.COLONCOLON;
          }
        case 268: break;
        case 125: 
          { return CSharpTokens.VIRTUAL_KEYWORD;
          }
        case 269: break;
        case 77: 
          { return CSharpTokens.LTLTEQ;
          }
        case 270: break;
        case 58: 
          { return CSharpTokens.XOREQ;
          }
        case 271: break;
        case 16: 
          { return CSharpTokens.LPAR;
          }
        case 272: break;
        case 145: 
          { return CSharpTokens.UNCHECKED_KEYWORD;
          }
        case 273: break;
        case 146: 
          { return CSharpTokens.NAMESPACE_KEYWORD;
          }
        case 274: break;
        case 25: 
          { return CSharpTokens.GT;
          }
        case 275: break;
        case 136: 
          { return CSharpTokens.OPERATOR_KEYWORD;
          }
        case 276: break;
        case 141: 
          { return CSharpTokens.__REFTYPE_KEYWORD;
          }
        case 277: break;
        case 54: 
          { return CSharpTokens.PLUSEQ;
          }
        case 278: break;
        case 105: 
          { return CSharpTokens.CONST_KEYWORD;
          }
        case 279: break;
        case 86: 
          { return CSharpTokens.VOID_KEYWORD;
          }
        case 280: break;
        case 131: 
          { return CSharpTokens.READONLY_KEYWORD;
          }
        case 281: break;
        case 19: 
          { return CSharpTokens.PERC;
          }
        case 282: break;
        case 48: 
          { return CSharpTokens.IF_KEYWORD;
          }
        case 283: break;
        case 116: 
          { return CSharpTokens.PARAMS_KEYWORD;
          }
        case 284: break;
        case 32: 
          { return CSharpTemplateTokens.MACRO_FRAGMENT;
          }
        case 285: break;
        case 22: 
          { return CSharpTokens.XOR;
          }
        case 286: break;
        case 97: 
          { return CSharpTokens.EVENT_KEYWORD;
          }
        case 287: break;
        case 36: 
          { return CSharpTokens.FLOAT_LITERAL;
          }
        case 288: break;
        case 68: 
          { return CSharpTokensImpl.LINE_DOC_COMMENT;
          }
        case 289: break;
        case 65: 
          { return CSharpTokens.NULLABE_CALL;
          }
        case 290: break;
        case 95: 
          { return CSharpTokens.SHORT_KEYWORD;
          }
        case 291: break;
        case 76: 
          { return CSharpTokens.OUT_KEYWORD;
          }
        case 292: break;
        case 23: 
          { return CSharpTokens.OR;
          }
        case 293: break;
        case 5: 
          { return CSharpTokens.MUL;
          }
        case 294: break;
        case 122: 
          { return CSharpTokens.FINALLY_KEYWORD;
          }
        case 295: break;
        case 133: 
          { return CSharpTokens.INTERNAL_KEYWORD;
          }
        case 296: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
